{"version":3,"sources":["../../src/tileset-manager/tileset-manager.ts"],"names":["TilesetManager","options","Map","tile","emit","updateTileVisible","error","tileSize","minZoom","maxZoom","Infinity","zoomOffset","extent","DEFAULT_EXTENT","getTileData","NOOP","updateStrategy","UpdateTileStrategy","Replace","updateOptions","currentTiles","every","isDone","tiles","Array","from","cacheTiles","values","sort","t1","t2","z","undefined","Math","ceil","floor","zoom","latLonBounds","verifyZoom","lastViewStates","latLonBoundsBuffer","BOUNDS_BUFFER_SCALE","isAddTile","tileIndices","getTileIndices","map","x","y","getTile","needsReload","isFailure","isCancelled","loadData","getData","onLoad","onTileLoad","onError","onTileError","createTile","resizeCacheTiles","rebuildTileTree","pruneRequests","tileId","includes","delete","onTileUnload","abortCandidates","isLoading","isCurrent","isVisible","push","length","shift","abortLoad","clear","removeAllListeners","beforeVisible","set","key","UPDATE_TILE_STRATEGIES","isVisibleChange","forEach","get","indices","getTileId","Tile","maxCacheSize","DEFAULT_CACHE_SCALE","overflown","size","parent","children","getNearestAncestor","EventEmitter"],"mappings":"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","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport {\n  BOUNDS_BUFFER_SCALE,\n  DEFAULT_CACHE_SCALE,\n  DEFAULT_EXTENT,\n  NOOP,\n  UPDATE_TILE_STRATEGIES,\n} from './const';\nimport { Tile } from './tile';\nimport { TilesetManagerOptions, UpdateTileStrategy } from './types';\nimport {\n  getLatLonBoundsBuffer,\n  isLatLonBoundsContains,\n} from './utils/bound-buffer';\nimport { getTileIndices } from './utils/lonlat-tile';\n\n/**\n * 管理瓦片数据\n */\nexport class TilesetManager extends EventEmitter {\n  public get isLoaded() {\n    return this.currentTiles.every((tile) => tile.isDone);\n  }\n  // 缓存的瓦片数组\n  public get tiles() {\n    // 通过 zoom 层级排序，最小的层级在上面\n    const tiles = Array.from(this.cacheTiles.values()).sort(\n      (t1, t2) => t1.z - t2.z,\n    );\n    return tiles;\n  }\n  // 当前层级的瓦片\n  public currentTiles: Tile[] = [];\n  // 配置项\n  protected options: TilesetManagerOptions;\n  // 缓存的瓦片，key 为 {z}-{x}-{y}\n  private cacheTiles = new Map<string, Tile>();\n  // 上一次视野状态\n  private lastViewStates?: {\n    zoom: number;\n    latLonBounds: [number, number, number, number];\n    latLonBoundsBuffer: [number, number, number, number];\n  };\n\n  constructor(options: Partial<TilesetManagerOptions>) {\n    super();\n    this.options = {\n      tileSize: 256,\n      minZoom: 0,\n      maxZoom: Infinity,\n      zoomOffset: 0,\n      extent: DEFAULT_EXTENT,\n      getTileData: NOOP,\n      updateStrategy: UpdateTileStrategy.Replace,\n    };\n    this.updateOptions(options);\n  }\n\n  // 更新配置项\n  public updateOptions(options: Partial<TilesetManagerOptions>) {\n    const minZoom =\n      options.minZoom === undefined\n        ? this.options.minZoom\n        : Math.ceil(options.minZoom);\n    const maxZoom =\n      options.maxZoom === undefined\n        ? this.options.maxZoom\n        : Math.floor(options.maxZoom);\n    this.options = { ...this.options, ...options, minZoom, maxZoom };\n  }\n\n  // 更新\n  // 1.瓦片序号发生改变 2.瓦片新增 3.瓦片显隐控制\n  public update(zoom: number, latLonBounds: [number, number, number, number]) {\n    // 校验层级，向上取整\n    const verifyZoom = Math.ceil(zoom);\n    if (\n      this.lastViewStates &&\n      this.lastViewStates.zoom === verifyZoom &&\n      isLatLonBoundsContains(\n        this.lastViewStates.latLonBoundsBuffer,\n        latLonBounds,\n      )\n    ) {\n      return;\n    }\n\n    // 扩大缓存区的边界\n    const latLonBoundsBuffer = getLatLonBoundsBuffer(\n      latLonBounds,\n      BOUNDS_BUFFER_SCALE,\n    );\n\n    this.lastViewStates = {\n      zoom: verifyZoom,\n      latLonBounds,\n      latLonBoundsBuffer,\n    };\n\n    let isAddTile = false;\n    const tileIndices = this.getTileIndices(verifyZoom, latLonBoundsBuffer);\n\n    this.currentTiles = tileIndices.map(({ x, y, z }) => {\n      let tile = this.getTile(x, y, z);\n      if (tile) {\n        const needsReload = tile?.isFailure || tile?.isCancelled;\n        if (needsReload) {\n          tile.loadData({\n            getData: this.options.getTileData,\n            onLoad: this.onTileLoad,\n            onError: this.onTileError,\n          });\n        }\n        return tile;\n      }\n\n      tile = this.createTile(x, y, z);\n      isAddTile = true;\n      return tile;\n    });\n\n    if (isAddTile) {\n      // 更新缓存\n      this.resizeCacheTiles();\n      // 重新瓦片树\n      this.rebuildTileTree();\n    }\n\n    // 更新瓦片显示状态\n    this.updateTileVisible();\n    // 取消滞留请求中的瓦片\n    this.pruneRequests();\n  }\n\n  // 重新加载瓦片\n  public reloadAll() {\n    for (const [tileId, tile] of this.cacheTiles) {\n      if (!this.currentTiles.includes(tile)) {\n        this.cacheTiles.delete(tileId);\n        this.onTileUnload(tile);\n      }\n      this.onTileUnload(tile);\n      tile.loadData({\n        getData: this.options.getTileData,\n        onLoad: this.onTileLoad,\n        onError: this.onTileError,\n      });\n    }\n  }\n\n  // 取消滞留请求中的瓦片\n  public pruneRequests() {\n    const abortCandidates: Tile[] = [];\n    for (const tile of this.cacheTiles.values()) {\n      if (tile.isLoading) {\n        if (!tile.isCurrent && !tile.isVisible) {\n          abortCandidates.push(tile);\n        }\n      }\n    }\n\n    while (abortCandidates.length > 0) {\n      const tile = abortCandidates.shift()!;\n      tile.abortLoad();\n    }\n  }\n\n  // 摧毁\n  public destroy() {\n    for (const tile of this.cacheTiles.values()) {\n      if (tile.isLoading) {\n        tile.abortLoad();\n      }\n    }\n    this.cacheTiles.clear();\n    this.currentTiles = [];\n    this.removeAllListeners();\n  }\n\n  // 更新瓦片显隐状态\n  public updateTileVisible() {\n    const updateStrategy = this.options.updateStrategy;\n    const beforeVisible = new Map<string, boolean>();\n    // 重置显示状态\n    for (const tile of this.cacheTiles.values()) {\n      // 存储已经显示的瓦片\n      beforeVisible.set(tile.key, tile.isVisible);\n      tile.isCurrent = false;\n      tile.isVisible = false;\n    }\n    // 设置当前视野的瓦片为可见\n    for (const tile of this.currentTiles) {\n      tile.isCurrent = true;\n      tile.isVisible = true;\n    }\n\n    const tiles = Array.from(this.cacheTiles.values());\n\n    if (typeof updateStrategy === 'function') {\n      updateStrategy(tiles);\n    } else {\n      UPDATE_TILE_STRATEGIES[updateStrategy](tiles);\n    }\n\n    // 检查瓦片显示状态是否发生改变\n    let isVisibleChange = false;\n    Array.from(this.cacheTiles.values()).forEach((tile) => {\n      if (tile.isVisible !== beforeVisible.get(tile.key)) {\n        tile.isVisibleChange = true;\n        isVisibleChange = true;\n      } else {\n        tile.isVisibleChange = false;\n      }\n    });\n\n    if (isVisibleChange) {\n      this.emit('tile-update');\n    }\n  }\n\n  // 获取当前视野层级瓦片的所有索引\n  protected getTileIndices(\n    zoom: number,\n    latLonBounds: [number, number, number, number],\n  ) {\n    const { tileSize, extent, zoomOffset } = this.options;\n    const maxZoom = Math.floor(this.options.maxZoom);\n    const minZoom = Math.ceil(this.options.minZoom);\n\n    const indices = getTileIndices({\n      maxZoom,\n      minZoom,\n      zoomOffset,\n      tileSize,\n      zoom,\n      latLonBounds,\n      extent,\n    });\n\n    return indices;\n  }\n\n  // 瓦片加载成功回调\n  private onTileLoad = (tile: Tile) => {\n    this.emit('tile-loaded', tile);\n    this.updateTileVisible();\n  };\n\n  // 瓦片加载失败回调\n  private onTileError = (error: Error, tile: Tile) => {\n    this.emit('tile-error', { error, tile });\n    this.updateTileVisible();\n  };\n\n  // 瓦片被删除回调\n  private onTileUnload = (tile: Tile) => {\n    this.emit('tile-unload', tile);\n  };\n\n  // 获取瓦片 ID\n  private getTileId(x: number, y: number, z: number) {\n    const tileId = `${x},${y},${z}`;\n    return tileId;\n  }\n\n  // 获取瓦片\n  private getTile(x: number, y: number, z: number) {\n    const tileId = this.getTileId(x, y, z);\n    const tile = this.cacheTiles.get(tileId);\n\n    return tile;\n  }\n\n  // 创建瓦片\n  private createTile(x: number, y: number, z: number) {\n    const tileId = this.getTileId(x, y, z);\n    const tile = new Tile({ x, y, z, tileSize: this.options.tileSize });\n\n    this.cacheTiles.set(tileId, tile);\n    tile.loadData({\n      getData: this.options.getTileData,\n      onLoad: this.onTileLoad,\n      onError: this.onTileError,\n    });\n\n    return tile;\n  }\n\n  // 当缓存超过最大值时，清除不可见的瓦片\n  private resizeCacheTiles() {\n    const maxCacheSize = DEFAULT_CACHE_SCALE * this.currentTiles.length;\n\n    const overflown = this.cacheTiles.size > maxCacheSize;\n\n    if (overflown) {\n      for (const [tileId, tile] of this.cacheTiles) {\n        if (!tile.isVisible && !this.currentTiles.includes(tile)) {\n          this.cacheTiles.delete(tileId);\n          this.onTileUnload(tile);\n        }\n        if (this.cacheTiles.size <= maxCacheSize) {\n          break;\n        }\n      }\n    }\n  }\n\n  // 重新计算瓦片树\n  private rebuildTileTree() {\n    // 清空瓦片上的数据\n    for (const tile of this.cacheTiles.values()) {\n      tile.parent = null;\n      tile.children.length = 0;\n    }\n\n    // 重新计算瓦片上的关系树\n    for (const tile of this.cacheTiles.values()) {\n      const parent = this.getNearestAncestor(tile.x, tile.y, tile.z);\n      tile.parent = parent;\n      if (parent?.children) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  // 获取瓦片的最近上级的瓦片\n  private getNearestAncestor(x: number, y: number, z: number) {\n    while (z > this.options.minZoom) {\n      x = Math.floor(x / 2);\n      y = Math.floor(y / 2);\n      z = z - 1;\n      const parent = this.getTile(x, y, z);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n"],"file":"tileset-manager.js"}
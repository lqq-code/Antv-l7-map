{"version":3,"sources":["../../src/tileset-manager/tileset-manager.ts"],"names":["EventEmitter","BOUNDS_BUFFER_SCALE","DEFAULT_CACHE_SCALE","DEFAULT_EXTENT","NOOP","UPDATE_TILE_STRATEGIES","Tile","UpdateTileStrategy","getLatLonBoundsBuffer","isLatLonBoundsContains","getTileIndices","TilesetManager","options","Map","tile","emit","updateTileVisible","error","tileSize","minZoom","maxZoom","Infinity","zoomOffset","extent","getTileData","updateStrategy","Replace","updateOptions","currentTiles","every","isDone","tiles","Array","from","cacheTiles","values","sort","t1","t2","z","undefined","Math","ceil","floor","zoom","latLonBounds","verifyZoom","lastViewStates","latLonBoundsBuffer","isAddTile","tileIndices","map","x","y","getTile","needsReload","isFailure","isCancelled","loadData","getData","onLoad","onTileLoad","onError","onTileError","createTile","resizeCacheTiles","rebuildTileTree","pruneRequests","tileId","includes","delete","onTileUnload","abortCandidates","isLoading","isCurrent","isVisible","push","length","shift","abortLoad","clear","removeAllListeners","beforeVisible","set","key","isVisibleChange","forEach","get","indices","getTileId","maxCacheSize","overflown","size","parent","children","getNearestAncestor"],"mappings":"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","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport {\n  BOUNDS_BUFFER_SCALE,\n  DEFAULT_CACHE_SCALE,\n  DEFAULT_EXTENT,\n  NOOP,\n  UPDATE_TILE_STRATEGIES,\n} from './const';\nimport { Tile } from './tile';\nimport { TilesetManagerOptions, UpdateTileStrategy } from './types';\nimport {\n  getLatLonBoundsBuffer,\n  isLatLonBoundsContains,\n} from './utils/bound-buffer';\nimport { getTileIndices } from './utils/lonlat-tile';\n\n/**\n * 管理瓦片数据\n */\nexport class TilesetManager extends EventEmitter {\n  public get isLoaded() {\n    return this.currentTiles.every((tile) => tile.isDone);\n  }\n  // 缓存的瓦片数组\n  public get tiles() {\n    // 通过 zoom 层级排序，最小的层级在上面\n    const tiles = Array.from(this.cacheTiles.values()).sort(\n      (t1, t2) => t1.z - t2.z,\n    );\n    return tiles;\n  }\n  // 当前层级的瓦片\n  public currentTiles: Tile[] = [];\n  // 配置项\n  protected options: TilesetManagerOptions;\n  // 缓存的瓦片，key 为 {z}-{x}-{y}\n  private cacheTiles = new Map<string, Tile>();\n  // 上一次视野状态\n  private lastViewStates?: {\n    zoom: number;\n    latLonBounds: [number, number, number, number];\n    latLonBoundsBuffer: [number, number, number, number];\n  };\n\n  constructor(options: Partial<TilesetManagerOptions>) {\n    super();\n    this.options = {\n      tileSize: 256,\n      minZoom: 0,\n      maxZoom: Infinity,\n      zoomOffset: 0,\n      extent: DEFAULT_EXTENT,\n      getTileData: NOOP,\n      updateStrategy: UpdateTileStrategy.Replace,\n    };\n    this.updateOptions(options);\n  }\n\n  // 更新配置项\n  public updateOptions(options: Partial<TilesetManagerOptions>) {\n    const minZoom =\n      options.minZoom === undefined\n        ? this.options.minZoom\n        : Math.ceil(options.minZoom);\n    const maxZoom =\n      options.maxZoom === undefined\n        ? this.options.maxZoom\n        : Math.floor(options.maxZoom);\n    this.options = { ...this.options, ...options, minZoom, maxZoom };\n  }\n\n  // 更新\n  // 1.瓦片序号发生改变 2.瓦片新增 3.瓦片显隐控制\n  public update(zoom: number, latLonBounds: [number, number, number, number]) {\n    // 校验层级，向上取整\n    const verifyZoom = Math.ceil(zoom);\n    if (\n      this.lastViewStates &&\n      this.lastViewStates.zoom === verifyZoom &&\n      isLatLonBoundsContains(\n        this.lastViewStates.latLonBoundsBuffer,\n        latLonBounds,\n      )\n    ) {\n      return;\n    }\n\n    // 扩大缓存区的边界\n    const latLonBoundsBuffer = getLatLonBoundsBuffer(\n      latLonBounds,\n      BOUNDS_BUFFER_SCALE,\n    );\n\n    this.lastViewStates = {\n      zoom: verifyZoom,\n      latLonBounds,\n      latLonBoundsBuffer,\n    };\n\n    let isAddTile = false;\n    const tileIndices = this.getTileIndices(verifyZoom, latLonBoundsBuffer);\n\n    this.currentTiles = tileIndices.map(({ x, y, z }) => {\n      let tile = this.getTile(x, y, z);\n      if (tile) {\n        const needsReload = tile?.isFailure || tile?.isCancelled;\n        if (needsReload) {\n          tile.loadData({\n            getData: this.options.getTileData,\n            onLoad: this.onTileLoad,\n            onError: this.onTileError,\n          });\n        }\n        return tile;\n      }\n\n      tile = this.createTile(x, y, z);\n      isAddTile = true;\n      return tile;\n    });\n\n    if (isAddTile) {\n      // 更新缓存\n      this.resizeCacheTiles();\n      // 重新瓦片树\n      this.rebuildTileTree();\n    }\n\n    // 更新瓦片显示状态\n    this.updateTileVisible();\n    // 取消滞留请求中的瓦片\n    this.pruneRequests();\n  }\n\n  // 重新加载瓦片\n  public reloadAll() {\n    for (const [tileId, tile] of this.cacheTiles) {\n      if (!this.currentTiles.includes(tile)) {\n        this.cacheTiles.delete(tileId);\n        this.onTileUnload(tile);\n      }\n      this.onTileUnload(tile);\n      tile.loadData({\n        getData: this.options.getTileData,\n        onLoad: this.onTileLoad,\n        onError: this.onTileError,\n      });\n    }\n  }\n\n  // 取消滞留请求中的瓦片\n  public pruneRequests() {\n    const abortCandidates: Tile[] = [];\n    for (const tile of this.cacheTiles.values()) {\n      if (tile.isLoading) {\n        if (!tile.isCurrent && !tile.isVisible) {\n          abortCandidates.push(tile);\n        }\n      }\n    }\n\n    while (abortCandidates.length > 0) {\n      const tile = abortCandidates.shift()!;\n      tile.abortLoad();\n    }\n  }\n\n  // 摧毁\n  public destroy() {\n    for (const tile of this.cacheTiles.values()) {\n      if (tile.isLoading) {\n        tile.abortLoad();\n      }\n    }\n    this.cacheTiles.clear();\n    this.currentTiles = [];\n    this.removeAllListeners();\n  }\n\n  // 更新瓦片显隐状态\n  public updateTileVisible() {\n    const updateStrategy = this.options.updateStrategy;\n    const beforeVisible = new Map<string, boolean>();\n    // 重置显示状态\n    for (const tile of this.cacheTiles.values()) {\n      // 存储已经显示的瓦片\n      beforeVisible.set(tile.key, tile.isVisible);\n      tile.isCurrent = false;\n      tile.isVisible = false;\n    }\n    // 设置当前视野的瓦片为可见\n    for (const tile of this.currentTiles) {\n      tile.isCurrent = true;\n      tile.isVisible = true;\n    }\n\n    const tiles = Array.from(this.cacheTiles.values());\n\n    if (typeof updateStrategy === 'function') {\n      updateStrategy(tiles);\n    } else {\n      UPDATE_TILE_STRATEGIES[updateStrategy](tiles);\n    }\n\n    // 检查瓦片显示状态是否发生改变\n    let isVisibleChange = false;\n    Array.from(this.cacheTiles.values()).forEach((tile) => {\n      if (tile.isVisible !== beforeVisible.get(tile.key)) {\n        tile.isVisibleChange = true;\n        isVisibleChange = true;\n      } else {\n        tile.isVisibleChange = false;\n      }\n    });\n\n    if (isVisibleChange) {\n      this.emit('tile-update');\n    }\n  }\n\n  // 获取当前视野层级瓦片的所有索引\n  protected getTileIndices(\n    zoom: number,\n    latLonBounds: [number, number, number, number],\n  ) {\n    const { tileSize, extent, zoomOffset } = this.options;\n    const maxZoom = Math.floor(this.options.maxZoom);\n    const minZoom = Math.ceil(this.options.minZoom);\n\n    const indices = getTileIndices({\n      maxZoom,\n      minZoom,\n      zoomOffset,\n      tileSize,\n      zoom,\n      latLonBounds,\n      extent,\n    });\n\n    return indices;\n  }\n\n  // 瓦片加载成功回调\n  private onTileLoad = (tile: Tile) => {\n    this.emit('tile-loaded', tile);\n    this.updateTileVisible();\n  };\n\n  // 瓦片加载失败回调\n  private onTileError = (error: Error, tile: Tile) => {\n    this.emit('tile-error', { error, tile });\n    this.updateTileVisible();\n  };\n\n  // 瓦片被删除回调\n  private onTileUnload = (tile: Tile) => {\n    this.emit('tile-unload', tile);\n  };\n\n  // 获取瓦片 ID\n  private getTileId(x: number, y: number, z: number) {\n    const tileId = `${x},${y},${z}`;\n    return tileId;\n  }\n\n  // 获取瓦片\n  private getTile(x: number, y: number, z: number) {\n    const tileId = this.getTileId(x, y, z);\n    const tile = this.cacheTiles.get(tileId);\n\n    return tile;\n  }\n\n  // 创建瓦片\n  private createTile(x: number, y: number, z: number) {\n    const tileId = this.getTileId(x, y, z);\n    const tile = new Tile({ x, y, z, tileSize: this.options.tileSize });\n\n    this.cacheTiles.set(tileId, tile);\n    tile.loadData({\n      getData: this.options.getTileData,\n      onLoad: this.onTileLoad,\n      onError: this.onTileError,\n    });\n\n    return tile;\n  }\n\n  // 当缓存超过最大值时，清除不可见的瓦片\n  private resizeCacheTiles() {\n    const maxCacheSize = DEFAULT_CACHE_SCALE * this.currentTiles.length;\n\n    const overflown = this.cacheTiles.size > maxCacheSize;\n\n    if (overflown) {\n      for (const [tileId, tile] of this.cacheTiles) {\n        if (!tile.isVisible && !this.currentTiles.includes(tile)) {\n          this.cacheTiles.delete(tileId);\n          this.onTileUnload(tile);\n        }\n        if (this.cacheTiles.size <= maxCacheSize) {\n          break;\n        }\n      }\n    }\n  }\n\n  // 重新计算瓦片树\n  private rebuildTileTree() {\n    // 清空瓦片上的数据\n    for (const tile of this.cacheTiles.values()) {\n      tile.parent = null;\n      tile.children.length = 0;\n    }\n\n    // 重新计算瓦片上的关系树\n    for (const tile of this.cacheTiles.values()) {\n      const parent = this.getNearestAncestor(tile.x, tile.y, tile.z);\n      tile.parent = parent;\n      if (parent?.children) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  // 获取瓦片的最近上级的瓦片\n  private getNearestAncestor(x: number, y: number, z: number) {\n    while (z > this.options.minZoom) {\n      x = Math.floor(x / 2);\n      y = Math.floor(y / 2);\n      z = z - 1;\n      const parent = this.getTile(x, y, z);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n"],"file":"tileset-manager.js"}
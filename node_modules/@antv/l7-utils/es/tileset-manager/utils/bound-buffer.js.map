{"version":3,"sources":["../../../src/tileset-manager/utils/bound-buffer.ts"],"names":["bBoxToBounds","boundsContains","padBounds","getLatLonBoundsBuffer","latLonBounds","bufferRatio","bounds","newBounds","maxLngExtent","maxLatExtent","latLonBoundsBuffer","Math","max","min","isLatLonBoundsContains","boundsBuffer","isContains"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,SAAvC,QAAwD,WAAxD;AAKA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCC,YADmC,EAEnCC,WAFmC,EAGhC;AACH,MAAMC,MAAM,GAAGN,YAAY,CAACI,YAAD,CAA3B;AACA,MAAMG,SAAS,GAAGL,SAAS,CAACI,MAAD,EAASD,WAAT,CAA3B;AAEA,MAAMG,YAAY,GAAG,MAAM,CAAN,GAAU,GAA/B;AACA,MAAMC,YAAY,GAAG,gBAArB;AAEA,MAAMC,kBAAkB,GAAG,CACzBC,IAAI,CAACC,GAAL,CAASL,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAT,EAA0B,CAACC,YAA3B,CADyB,EAEzBG,IAAI,CAACC,GAAL,CAASL,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAT,EAA0B,CAACE,YAA3B,CAFyB,EAGzBE,IAAI,CAACE,GAAL,CAASN,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAT,EAA0BC,YAA1B,CAHyB,EAIzBG,IAAI,CAACE,GAAL,CAASN,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAT,EAA0BE,YAA1B,CAJyB,CAA3B;AAOA,SAAOC,kBAAP;AACD,CAlBM;AAuBP,OAAO,IAAMI,sBAAsB,GAAG,SAAzBA,sBAAyB,CACpCJ,kBADoC,EAEpCN,YAFoC,EAGjC;AACH,MAAMW,YAAY,GAAGf,YAAY,CAACU,kBAAD,CAAjC;AACA,MAAMJ,MAAM,GAAGN,YAAY,CAACI,YAAD,CAA3B;AACA,MAAMY,UAAU,GAAGf,cAAc,CAACc,YAAD,EAAeT,MAAf,CAAjC;AAEA,SAAOU,UAAP;AACD,CATM","sourcesContent":["import { bBoxToBounds, boundsContains, padBounds } from '../../geo';\n\n/**\n * 获取经纬度边界的缓存后的边界\n */\nexport const getLatLonBoundsBuffer = (\n  latLonBounds: [number, number, number, number],\n  bufferRatio: number,\n) => {\n  const bounds = bBoxToBounds(latLonBounds);\n  const newBounds = padBounds(bounds, bufferRatio);\n  // 地图对称子午线最多重复三次\n  const maxLngExtent = 360 * 3 - 180;\n  const maxLatExtent = 85.0511287798065;\n\n  const latLonBoundsBuffer = [\n    Math.max(newBounds[0][0], -maxLngExtent),\n    Math.max(newBounds[0][1], -maxLatExtent),\n    Math.min(newBounds[1][0], maxLngExtent),\n    Math.min(newBounds[1][1], maxLatExtent),\n  ] as [number, number, number, number];\n\n  return latLonBoundsBuffer;\n};\n\n/**\n * 边界是否包含在内\n */\nexport const isLatLonBoundsContains = (\n  latLonBoundsBuffer: [number, number, number, number],\n  latLonBounds: [number, number, number, number],\n) => {\n  const boundsBuffer = bBoxToBounds(latLonBoundsBuffer);\n  const bounds = bBoxToBounds(latLonBounds);\n  const isContains = boundsContains(boundsBuffer, bounds);\n\n  return isContains;\n};\n"],"file":"bound-buffer.js"}
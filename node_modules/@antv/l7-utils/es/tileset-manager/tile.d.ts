import { TileBounds, TileLoadDataOptions, TileOptions } from './types';
/**
 * 单个瓦片
 * 负责瓦片数据加载、缓存数据、缓存图层
 */
export declare class Tile {
    x: number;
    y: number;
    z: number;
    tileSize: number;
    isVisible: boolean;
    isCurrent: boolean;
    isVisibleChange: boolean;
    parentLayerIDList: string[];
    layerIDList: string[];
    parent: Tile | null;
    children: Tile[];
    data: any;
    properties: Record<string, any>;
    xhrCancel?: () => void;
    private loadStatus;
    private abortController;
    private loadDataId;
    constructor(options: TileOptions);
    get isLoading(): boolean;
    get isLoaded(): boolean;
    get isFailure(): boolean;
    get isCancelled(): boolean;
    get isDone(): boolean;
    get bounds(): TileBounds;
    get bboxPolygon(): import("@turf/helpers").Feature<import("@turf/helpers").Polygon, {
        key: string;
        bbox: TileBounds;
        center: readonly [number, number];
        meta: string;
    }>;
    get key(): string;
    loadData({ getData, onLoad, onError }: TileLoadDataOptions): Promise<void>;
    reloadData(params: TileLoadDataOptions): void;
    abortLoad(): void;
}

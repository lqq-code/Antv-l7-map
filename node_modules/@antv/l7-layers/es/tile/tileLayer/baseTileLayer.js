import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { decodePickingColor } from '@antv/l7-utils';
import { TileLayerManager } from '../manager/tileLayerManager';

var BaseTileLayer = function () {
  function BaseTileLayer(_ref) {
    var _parentSource$data;

    var parent = _ref.parent,
        rendererService = _ref.rendererService,
        mapService = _ref.mapService,
        layerService = _ref.layerService,
        pickingService = _ref.pickingService;

    _classCallCheck(this, BaseTileLayer);

    _defineProperty(this, "type", 'baseTile');

    _defineProperty(this, "sourceLayer", void 0);

    _defineProperty(this, "parent", void 0);

    _defineProperty(this, "initedTileset", false);

    _defineProperty(this, "tilesetManager", void 0);

    _defineProperty(this, "tileLayerManager", void 0);

    _defineProperty(this, "scaleField", void 0);

    _defineProperty(this, "lastViewStates", void 0);

    _defineProperty(this, "timer", void 0);

    _defineProperty(this, "mapService", void 0);

    _defineProperty(this, "layerService", void 0);

    _defineProperty(this, "pickColors", {
      select: null,
      active: null
    });

    var parentSource = parent.getSource();

    var _ref2 = (parentSource === null || parentSource === void 0 ? void 0 : (_parentSource$data = parentSource.data) === null || _parentSource$data === void 0 ? void 0 : _parentSource$data.tilesetOptions) || {},
        sourceLayer = _ref2.sourceLayer,
        coords = _ref2.coords,
        featureId = _ref2.featureId;

    this.sourceLayer = sourceLayer;
    this.parent = parent;
    this.mapService = mapService;
    this.layerService = layerService;
    this.tileLayerManager = new TileLayerManager(parent, mapService, rendererService, pickingService, layerService);
    this.initTileSetManager();
    this.bindSubLayerEvent();
    this.bindSubLayerPick();
    this.scaleField = this.parent.getScaleOptions();
  }

  _createClass(BaseTileLayer, [{
    key: "children",
    get: function get() {
      return this.tileLayerManager.children;
    }
  }, {
    key: "render",
    value: function render() {
      if (this.tileLayerManager) {
        this.tileLayerManager.render();
      }
    }
  }, {
    key: "clearPick",
    value: function clearPick(type) {
      if (type === 'mousemove') {
        this.tileLayerManager.tilePickManager.clearPick();
      }
    }
  }, {
    key: "clearPickState",
    value: function clearPickState() {
      var _this = this;

      this.children.filter(function (child) {
        return child.inited && child.isVisible();
      }).filter(function (child) {
        return child.getCurrentSelectedId() !== null;
      }).map(function (child) {
        _this.selectFeature(child, new Uint8Array([0, 0, 0, 0]));

        child.setCurrentSelectedId(null);
      });
    }
  }, {
    key: "pickLayers",
    value: function pickLayers(target) {
      return this.tileLayerManager.pickLayers(target);
    }
  }, {
    key: "tileLoaded",
    value: function tileLoaded(tile) {}
  }, {
    key: "tileError",
    value: function tileError(error) {
      console.warn('error:', error);
    }
  }, {
    key: "tileUnLoad",
    value: function tileUnLoad(tile) {
      this.tileLayerManager.removeChilds(tile.layerIDList, false);
    }
  }, {
    key: "tileUpdate",
    value: function tileUpdate() {
      var _this2 = this;

      if (!this.tilesetManager) {
        return;
      }

      this.tilesetManager.tiles.filter(function (tile) {
        return tile.isLoaded;
      }).map(function (tile) {
        if (tile.layerIDList.length === 0) {
          var _this2$tileLayerManag = _this2.tileLayerManager.createTile(tile),
              layers = _this2$tileLayerManag.layers,
              layerIDList = _this2$tileLayerManag.layerIDList;

          tile.layerIDList = layerIDList;

          _this2.tileLayerManager.addChilds(layers);
        } else {
          if (!tile.isVisibleChange) {
            return;
          }

          var _layers = _this2.tileLayerManager.getChilds(tile.layerIDList);

          _this2.tileLayerManager.updateLayersConfig(_layers, 'visible', tile.isVisible);
        }
      });

      if (this.tilesetManager.isLoaded) {
        this.parent.emit('tiles-loaded', this.tilesetManager.currentTiles);
      }
    }
  }, {
    key: "setPickState",
    value: function setPickState(layers) {
      var _this3 = this;

      if (this.pickColors.select) {
        var selectedId = decodePickingColor(this.pickColors.select);
        layers.map(function (layer) {
          _this3.selectFeature(layer, _this3.pickColors.select);

          layer.setCurrentSelectedId(selectedId);
        });
      }

      if (this.pickColors.active) {
        var _selectedId = decodePickingColor(this.pickColors.active);

        layers.filter(function (layer) {
          return layer.inited && layer.isVisible();
        }).map(function (layer) {
          layer.hooks.beforeHighlight.call(_this3.pickColors.active);
          layer.setCurrentPickId(_selectedId);
        });
      }
    }
  }, {
    key: "bindSubLayerPick",
    value: function bindSubLayerPick() {
      var _this4 = this;

      this.tileLayerManager.tilePickManager.on('pick', function (e) {
        var _e$pickedColors = _slicedToArray(e.pickedColors, 3),
            r = _e$pickedColors[0],
            g = _e$pickedColors[1],
            b = _e$pickedColors[2];

        if (e.type === 'click') {
          var restLayers = _this4.children.filter(function (child) {
            return child.inited && child.isVisible() && child.isVector;
          }).filter(function (child) {
            return child !== e.layer;
          });

          _this4.setSelect(restLayers, [r, g, b]);
        } else {
          _this4.setHighlight([r, g, b]);
        }
      });
      this.tileLayerManager.tilePickManager.on('unpick', function () {
        _this4.pickColors.active = null;
      });
    }
  }, {
    key: "setHighlight",
    value: function setHighlight(pickedColors) {
      var pickId = decodePickingColor(pickedColors);
      this.pickColors.active = pickedColors;
      this.children.filter(function (child) {
        return child.inited && child.isVisible() && child.isVector;
      }).filter(function (child) {
        return child.getPickID() !== pickId;
      }).map(function (child) {
        child.setPickID(pickId);
        child.hooks.beforeHighlight.call(pickedColors);
      });
    }
  }, {
    key: "setSelect",
    value: function setSelect(layers, pickedColors) {
      var _this5 = this;

      var selectedId = decodePickingColor(pickedColors);
      layers.map(function (layer) {
        if (layer.getCurrentSelectedId() === null || selectedId !== layer.getCurrentSelectedId()) {
          _this5.selectFeature(layer, pickedColors);

          layer.setCurrentSelectedId(selectedId);
          _this5.pickColors.select = pickedColors;
        } else {
          _this5.selectFeature(layer, new Uint8Array([0, 0, 0, 0]));

          layer.setCurrentSelectedId(null);
          _this5.pickColors.select = null;
        }
      });
      var renderList = this.layerService.getRenderList();
      renderList.filter(function (layer) {
        return layer.inited && !layer.isVector && layer.isVisible() && layer.needPick('click');
      }).filter(function (layer) {
        return layer.getCurrentSelectedId() !== null;
      }).map(function (layer) {
        _this5.selectFeature(layer, new Uint8Array([0, 0, 0, 0]));

        layer.setCurrentSelectedId(null);
      });
    }
  }, {
    key: "selectFeature",
    value: function selectFeature(layer, pickedColors) {
      var _pickedColors = _slicedToArray(pickedColors, 3),
          r = _pickedColors[0],
          g = _pickedColors[1],
          b = _pickedColors[2];

      layer.hooks.beforeSelect.call([r, g, b]);
    }
  }, {
    key: "bindSubLayerEvent",
    value: function bindSubLayerEvent() {
      var _this6 = this;

      this.parent.on('subLayerClick', function (e) {
        _this6.parent.emit('click', _objectSpread({}, e));
      });
      this.parent.on('subLayerMouseMove', function (e) {
        return _this6.parent.emit('mousemove', _objectSpread({}, e));
      });
      this.parent.on('subLayerMouseUp', function (e) {
        return _this6.parent.emit('mouseup', _objectSpread({}, e));
      });
      this.parent.on('subLayerMouseEnter', function (e) {
        return _this6.parent.emit('mouseenter', _objectSpread({}, e));
      });
      this.parent.on('subLayerMouseOut', function (e) {
        return _this6.parent.emit('mouseout', _objectSpread({}, e));
      });
      this.parent.on('subLayerMouseDown', function (e) {
        return _this6.parent.emit('mousedown', _objectSpread({}, e));
      });
      this.parent.on('subLayerContextmenu', function (e) {
        return _this6.parent.emit('contextmenu', _objectSpread({}, e));
      });
      this.parent.on('subLayerUnClick', function (e) {
        return _this6.parent.emit('unclick', _objectSpread({}, e));
      });
      this.parent.on('subLayerUnMouseMove', function (e) {
        return _this6.parent.emit('unmousemove', _objectSpread({}, e));
      });
      this.parent.on('subLayerUnMouseUp', function (e) {
        return _this6.parent.emit('unmouseup', _objectSpread({}, e));
      });
      this.parent.on('subLayerUnMouseDown', function (e) {
        return _this6.parent.emit('unmousedown', _objectSpread({}, e));
      });
      this.parent.on('subLayerUnContextmenu', function (e) {
        return _this6.parent.emit('uncontextmenu', _objectSpread({}, e));
      });
    }
  }, {
    key: "initTileSetManager",
    value: function initTileSetManager() {
      var _this$tilesetManager;

      var source = this.parent.getSource();
      this.tilesetManager = source.tileset;

      if (!this.initedTileset) {
        this.bindTilesetEvent();
        this.initedTileset = true;
      }

      var _this$getCurrentView = this.getCurrentView(),
          latLonBounds = _this$getCurrentView.latLonBounds,
          zoom = _this$getCurrentView.zoom;

      (_this$tilesetManager = this.tilesetManager) === null || _this$tilesetManager === void 0 ? void 0 : _this$tilesetManager.update(zoom, latLonBounds);
    }
  }, {
    key: "mapchange",
    value: function mapchange() {
      var _this$tilesetManager2;

      var _this$getCurrentView2 = this.getCurrentView(),
          latLonBounds = _this$getCurrentView2.latLonBounds,
          zoom = _this$getCurrentView2.zoom;

      if (this.mapService.version === 'GAODE1.x') {
        var _this$parent$getLayer = this.parent.getLayerConfig(),
            visible = _this$parent$getLayer.visible;

        if (zoom < 3 && visible) {
          this.parent.updateLayerConfig({
            visible: false
          });
          this.layerService.updateLayerRenderList();
        } else if (zoom >= 3 && !visible) {
          this.parent.updateLayerConfig({
            visible: true
          });
          this.layerService.updateLayerRenderList();
        }
      }

      if (this.lastViewStates && this.lastViewStates.zoom === zoom && this.lastViewStates.latLonBounds.toString() === latLonBounds.toString()) {
        return;
      }

      this.lastViewStates = {
        zoom: zoom,
        latLonBounds: latLonBounds
      };

      if (this.timer) {
        clearTimeout(this.timer);
        this.timer = null;
      }

      (_this$tilesetManager2 = this.tilesetManager) === null || _this$tilesetManager2 === void 0 ? void 0 : _this$tilesetManager2.update(zoom, latLonBounds);
    }
  }, {
    key: "bindTilesetEvent",
    value: function bindTilesetEvent() {
      var _this7 = this;

      if (!this.tilesetManager) {
        return;
      }

      this.tilesetManager.on('tile-loaded', function (tile) {});
      this.tilesetManager.on('tile-unload', function (tile) {
        _this7.tileUnLoad(tile);
      });
      this.tilesetManager.on('tile-error', function (error, tile) {
        _this7.tileError(error);
      });
      this.tilesetManager.on('tile-update', function () {
        _this7.tileUpdate();
      });
      this.mapService.on('zoomend', function () {
        return _this7.mapchange();
      });
      this.mapService.on('moveend', function () {
        return _this7.mapchange();
      });
    }
  }, {
    key: "getCurrentView",
    value: function getCurrentView() {
      var bounds = this.mapService.getBounds();
      var latLonBounds = [bounds[0][0], bounds[0][1], bounds[1][0], bounds[1][1]];
      var zoom = this.mapService.getZoom();
      return {
        latLonBounds: latLonBounds,
        zoom: zoom
      };
    }
  }]);

  return BaseTileLayer;
}();

export { BaseTileLayer as default };
//# sourceMappingURL=baseTileLayer.js.map
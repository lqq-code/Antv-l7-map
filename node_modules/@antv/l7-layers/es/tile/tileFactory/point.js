import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import TileFactory from './base';

var VectorPolygonTile = function (_TileFactory) {
  _inherits(VectorPolygonTile, _TileFactory);

  var _super = _createSuper(VectorPolygonTile);

  function VectorPolygonTile(option) {
    var _this;

    _classCallCheck(this, VectorPolygonTile);

    _this = _super.call(this, option);

    _defineProperty(_assertThisInitialized(_this), "parentLayer", void 0);

    _this.parentLayer = option.parent;
    return _this;
  }

  _createClass(VectorPolygonTile, [{
    key: "createTile",
    value: function createTile(tile, initOptions) {
      var _this$getFeatureData = this.getFeatureData(tile, initOptions),
          features = _this$getFeatureData.features,
          vectorTileLayer = _this$getFeatureData.vectorTileLayer,
          source = _this$getFeatureData.source;

      if (features.length === 0) {
        return {
          layers: [],
          layerIDList: []
        };
      }

      var layer = this.createLayer({
        tile: tile,
        initOptions: initOptions,
        vectorTileLayer: vectorTileLayer,
        source: source
      });
      return {
        layers: [layer],
        layerIDList: [layer.id]
      };
    }
  }]);

  return VectorPolygonTile;
}(TileFactory);

export { VectorPolygonTile as default };
//# sourceMappingURL=point.js.map
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { registerLayers } from '../utils';
import TileFactory from './base';
import RasterDataLayer from './rasterDataLayer';

var RasterTiffTile = function (_TileFactory) {
  _inherits(RasterTiffTile, _TileFactory);

  var _super = _createSuper(RasterTiffTile);

  function RasterTiffTile(option) {
    var _this;

    _classCallCheck(this, RasterTiffTile);

    _this = _super.call(this, option);

    _defineProperty(_assertThisInitialized(_this), "parentLayer", void 0);

    _this.parentLayer = option.parent;
    return _this;
  }

  _createClass(RasterTiffTile, [{
    key: "createTile",
    value: function createTile(tile, initOptions) {
      var opacity = initOptions.opacity,
          domain = initOptions.domain,
          clampHigh = initOptions.clampHigh,
          clampLow = initOptions.clampLow,
          rampColors = initOptions.rampColors,
          rampColorsData = initOptions.rampColorsData,
          mask = initOptions.mask;
      var rasterdata = tile.data;

      if (!rasterdata.data) {
        console.warn('raster data not exist!');
        return {
          layers: [],
          layerIDList: []
        };
      }

      var layer = new RasterDataLayer({
        visible: tile.isVisible,
        mask: mask
      }).source(rasterdata.data, {
        parser: {
          type: 'raster',
          width: rasterdata.width,
          height: rasterdata.height,
          extent: tile.bboxPolygon.bbox
        }
      }).style({
        opacity: opacity,
        domain: domain,
        clampHigh: clampHigh,
        clampLow: clampLow,
        rampColors: rampColors,
        rampColorsData: rampColorsData
      });
      this.emitEvent([layer], false);
      registerLayers(this.parentLayer, [layer]);
      return {
        layers: [layer],
        layerIDList: [layer.id]
      };
    }
  }]);

  return RasterTiffTile;
}(TileFactory);

export { RasterTiffTile as default };
//# sourceMappingURL=rasterData.js.map
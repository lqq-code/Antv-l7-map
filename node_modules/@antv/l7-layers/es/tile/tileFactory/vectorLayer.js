import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import BaseLayer from '../../core/BaseLayer';
import lineFillModel from '../../line/models/tile';
import pointTextModel from '../../point/models/text';
import pointFillModel from '../../point/models/tile';
import polygonFillModel from '../../polygon/models/tile';

var VectorLayer = function (_BaseLayer) {
  _inherits(VectorLayer, _BaseLayer);

  var _super = _createSuper(VectorLayer);

  function VectorLayer() {
    var _this;

    _classCallCheck(this, VectorLayer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "isVector", true);

    _defineProperty(_assertThisInitialized(_this), "type", _this.layerType);

    _defineProperty(_assertThisInitialized(_this), "pickedID", null);

    return _this;
  }

  _createClass(VectorLayer, [{
    key: "getPickID",
    value: function getPickID() {
      return this.pickedID;
    }
  }, {
    key: "setPickID",
    value: function setPickID() {
      return this.pickedID;
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      var model = this.getModelType();
      this.layerModel = new model(this);
      this.models = this.layerModel.initModels();
    }
  }, {
    key: "rebuildModels",
    value: function rebuildModels() {
      this.models = this.layerModel.buildModels();
    }
  }, {
    key: "getModelType",
    value: function getModelType() {
      switch (this.layerType) {
        case 'PolygonLayer':
          return polygonFillModel;

        case 'LineLayer':
          return lineFillModel;

        case 'PointLayer':
          return this.getPointModel();

        default:
          return pointFillModel;
      }
    }
  }, {
    key: "getPointModel",
    value: function getPointModel() {
      var layerData = this.getEncodedData();

      var _this$getLayerConfig = this.getLayerConfig(),
          shape2d = _this$getLayerConfig.shape2d;

      var item = layerData.find(function (fe) {
        return fe.hasOwnProperty('shape');
      });

      if (item) {
        var shape = item.shape;

        if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {
          return pointFillModel;
        } else {
          return pointTextModel;
        }
      } else {
        return pointFillModel;
      }
    }
  }, {
    key: "getConfigSchema",
    value: function getConfigSchema() {
      return {
        properties: {
          opacity: {
            type: 'number',
            minimum: 0,
            maximum: 1
          }
        }
      };
    }
  }, {
    key: "getDefaultConfig",
    value: function getDefaultConfig() {
      return {};
    }
  }]);

  return VectorLayer;
}(BaseLayer);

export { VectorLayer as default };
//# sourceMappingURL=vectorLayer.js.map
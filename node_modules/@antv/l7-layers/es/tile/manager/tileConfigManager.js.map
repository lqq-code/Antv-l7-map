{"version":3,"sources":["../../../src/tile/manager/tileConfigManager.ts"],"names":["EventEmitter","TileConfigManager","cacheConfig","Map","key","value","checkConfigList","includes","push","set","configIndex","indexOf","delete","splice","layer","inited","layerConfig","getLayerConfig","updateConfigs","map","get","currentConfig","getAttribute","scale","setConfig","length","console","warn","emit","name","attribute","scaleValue","field","undefined","values","callback"],"mappings":"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","sourcesContent":["import { ILayer, IScaleValue, ISubLayerInitOptions } from '@antv/l7-core';\nimport EventEmitter from 'eventemitter3';\nimport { isEqual } from 'lodash';\nexport interface ITileConfigManager {\n  setConfig(key: string, value: any): void;\n  checkConfig(layer: ILayer): void;\n  on(event: string, fn: (...args: any[]) => void): void;\n  getAttributeScale(layer: ILayer, name: string): IScaleValue;\n}\n\nexport default class TileConfigManager extends EventEmitter {\n  public cacheConfig: Map<string, any>;\n  public checkConfigList: string[] = [];\n  constructor() {\n    super();\n    this.cacheConfig = new Map();\n  }\n\n  public setConfig(key: string, value: any) {\n    if (!this.checkConfigList.includes(key)) {\n      this.checkConfigList.push(key);\n    }\n    this.cacheConfig.set(key, value);\n  }\n\n  public removeConfig(key: string) {\n    const configIndex = this.checkConfigList.indexOf(key);\n    if (configIndex > -1) {\n      this.cacheConfig.delete(key);\n      this.checkConfigList.splice(configIndex, 1);\n    }\n  }\n\n  public checkConfig(layer: ILayer) {\n    if (!layer.inited) {\n      return;\n    }\n\n    const layerConfig = layer.getLayerConfig() as ISubLayerInitOptions;\n    const updateConfigs: string[] = [];\n    this.checkConfigList.map((key) => {\n      const cacheConfig = this.cacheConfig.get(key);\n\n      let currentConfig;\n      if (['color', 'size', 'shape'].includes(key)) {\n        currentConfig = layer.getAttribute(key)?.scale;\n      } else {\n        if (!(key in layerConfig)) {\n          return;\n        }\n        // @ts-ignore\n        currentConfig = layerConfig[key];\n      }\n\n      if (!isEqual(cacheConfig, currentConfig)) {\n        updateConfigs.push(key);\n        this.setConfig(key, currentConfig);\n      }\n    });\n    if (updateConfigs.length > 0) {\n      console.warn('tile config cache update!', updateConfigs);\n      this.emit('updateConfig', updateConfigs);\n    }\n  }\n\n  public getAttributeScale(layer: ILayer, name: string): IScaleValue {\n    const attribute = layer.getAttribute(name);\n    const scaleValue: IScaleValue = {\n      field: undefined,\n      values: undefined,\n      callback: undefined,\n    };\n    if (attribute && attribute.scale) {\n      const { field, values, callback } = attribute.scale;\n      scaleValue.field = field;\n      scaleValue.values = values;\n      scaleValue.callback = callback;\n    }\n    return scaleValue;\n  }\n}\n"],"file":"tileConfigManager.js"}
{"version":3,"sources":["../../../src/tile/manager/tilePickerManager.ts"],"names":["EventEmitter","TilePickManager","parent","rendererService","pickingService","children","layerService","layers","filter","layer","inited","isVisible","map","hooks","beforeRenderData","call","beforeRender","masks","length","clear","stencil","depth","framebuffer","m","render","afterRender","target","type","renderMask","isPicked","needPick","some","beforePickingEncode","renderModels","afterPickingEncode","layerPicked","pickFromPickingFBO","emit","pickedColors","pickedTileLayers","isLastPicked","beforeHighlight","child","beforeSelect"],"mappings":"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","sourcesContent":["import {\n  IInteractionTarget,\n  ILayer,\n  ILayerService,\n  IPickingService,\n  IRendererService,\n  ITilePickManager,\n} from '@antv/l7-core';\nimport { EventEmitter } from 'eventemitter3';\nexport default class TilePickManager extends EventEmitter\n  implements ITilePickManager {\n  public isLastPicked: boolean = false;\n  private rendererService: IRendererService;\n  private pickingService: IPickingService;\n  private layerService: ILayerService;\n  private children: ILayer[];\n  private parent: ILayer;\n\n  constructor(\n    parent: ILayer,\n    rendererService: IRendererService,\n    pickingService: IPickingService,\n    children: ILayer[],\n    layerService: ILayerService,\n  ) {\n    super();\n    this.parent = parent;\n    this.rendererService = rendererService;\n    this.pickingService = pickingService;\n    this.layerService = layerService;\n    this.children = children;\n  }\n\n  /**\n   *\n   * @param layers\n   */\n  public normalRender(layers: ILayer[]) {\n    layers\n      .filter((layer) => layer.inited)\n      .filter((layer) => layer.isVisible())\n      .map((layer) => {\n        layer.hooks.beforeRenderData.call();\n        layer.hooks.beforeRender.call();\n        if (layer.masks.length > 0) {\n          // 清除上一次的模版缓存\n          this.rendererService.clear({\n            stencil: 0,\n            depth: 1,\n            framebuffer: null,\n          });\n          layer.masks.map((m: ILayer) => {\n            m.hooks.beforeRender.call();\n            m.render();\n            m.hooks.afterRender.call();\n          });\n        }\n        layer.render();\n        layer.hooks.afterRender.call();\n      });\n  }\n\n  public pickRender(layers: ILayer[], target: IInteractionTarget) {\n    // Tip: 在进行拾取渲染的时候也需要先渲染一遍父组件然后再渲染子组件\n    //  如需要在 栅格瓦片存在 Mask 的时候发生的拾取，那么就需要先渲染父组件（渲染父组件的帧缓冲）\n    if (this.parent.type === 'RasterLayer') {\n      this.renderMask(this.parent);\n    }\n    const isPicked = layers\n      .filter(\n        (layer) =>\n          this.parent.needPick(target.type) &&\n          layer.inited &&\n          layer.isVisible(),\n      )\n      .some((layer) => {\n        layer.hooks.beforePickingEncode.call();\n        if (layer.masks.length > 0) {\n          // 清除上一次的模版缓存\n          this.rendererService.clear({\n            stencil: 0,\n            depth: 1,\n            framebuffer: null,\n          });\n\n          layer.masks.map((m: ILayer) => {\n            m.hooks.beforeRender.call();\n            m.render();\n            m.hooks.afterRender.call();\n          });\n        }\n        layer.renderModels(true);\n        layer.hooks.afterPickingEncode.call();\n        const layerPicked = this.pickingService.pickFromPickingFBO(\n          layer,\n          target,\n        );\n        // RasterLayer 不参与拾取后的 shader 计算\n        if (layerPicked && this.parent.type !== 'RasterLayer') {\n          this.emit('pick', {\n            type: target.type,\n            pickedColors: this.pickingService.pickedColors,\n            layer,\n          });\n          this.pickingService.pickedTileLayers = [this.parent];\n        }\n\n        return layerPicked;\n      });\n    if (\n      this.parent.type !== 'RasterLayer' &&\n      !isPicked &&\n      this.isLastPicked &&\n      target.type !== 'click'\n    ) {\n      // 只有上一次有被高亮选中，本次未选中的时候才需要清除选中状态\n      this.pickingService.pickedTileLayers = [];\n      this.emit('unpick', {});\n      this.beforeHighlight([0, 0, 0]);\n    }\n    this.isLastPicked = isPicked;\n    return isPicked;\n  }\n\n  public clearPick() {\n    this.children\n      .filter((child) => child.inited && child.isVisible())\n      .map((layer) => {\n        layer.hooks.beforeSelect.call([0, 0, 0]);\n      });\n    this.pickingService.pickedTileLayers = [];\n  }\n\n  public beforeHighlight(pickedColors: any) {\n    this.children\n      .filter((child) => child.inited && child.isVisible())\n      .map((child) => {\n        child.hooks.beforeHighlight.call(pickedColors);\n      });\n  }\n\n  public beforeSelect(pickedColors: any) {\n    this.children\n      .filter((child) => child.inited && child.isVisible())\n      .map((layer) => {\n        layer.hooks.beforeSelect.call(pickedColors);\n      });\n  }\n\n  protected renderMask(layer: ILayer) {\n    if (layer.inited && layer.isVisible()) {\n      layer.hooks.beforeRender.call();\n      if (layer.masks.length > 0) {\n        this.rendererService.clear({\n          stencil: 0,\n          depth: 1,\n          framebuffer: null,\n        });\n        layer.masks.map((m: ILayer) => {\n          m.hooks.beforeRender.call();\n          m.render();\n          m.hooks.afterRender.call();\n        });\n      }\n      layer.hooks.afterRender.call();\n    }\n  }\n}\n"],"file":"tilePickerManager.js"}
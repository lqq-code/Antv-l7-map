import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import BaseTileLayer from './tileLayer/baseTileLayer';
export var TMSTileLayer = function (_BaseTileLayer) {
  _inherits(TMSTileLayer, _BaseTileLayer);

  var _super = _createSuper(TMSTileLayer);

  function TMSTileLayer() {
    var _this;

    _classCallCheck(this, TMSTileLayer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "type", 'TMS');

    return _this;
  }

  _createClass(TMSTileLayer, [{
    key: "tileUnLoad",
    value: function tileUnLoad(tile) {
      this.tileLayerManager.removeChilds(tile.layerIDList, false);
    }
  }, {
    key: "tileUpdate",
    value: function tileUpdate() {
      var _this2 = this;

      if (!this.tilesetManager) {
        return;
      }

      this.tilesetManager.tiles.filter(function (tile) {
        return tile.isLoaded;
      }).map(function (tile) {
        var _tile$data;

        if ((_tile$data = tile.data) !== null && _tile$data !== void 0 && _tile$data.layers && _this2.sourceLayer) {
          var vectorTileLayer = tile.data.layers[_this2.sourceLayer];
          var features = vectorTileLayer === null || vectorTileLayer === void 0 ? void 0 : vectorTileLayer.features;

          if (!(Array.isArray(features) && features.length > 0)) {
            return;
          }
        }

        if (!tile.parentLayerIDList.includes(_this2.parent.id)) {
          var _tile$layerIDList;

          var _this2$tileLayerManag = _this2.tileLayerManager.createTile(tile),
              layers = _this2$tileLayerManag.layers,
              layerIDList = _this2$tileLayerManag.layerIDList;

          tile.parentLayerIDList.push(_this2.parent.id);

          (_tile$layerIDList = tile.layerIDList).push.apply(_tile$layerIDList, _toConsumableArray(layerIDList));

          _this2.tileLayerManager.addChilds(layers);

          _this2.setPickState(layers);
        } else {
          if (!tile.isVisibleChange) {
            return;
          }

          var _layers = _this2.tileLayerManager.getChilds(tile.layerIDList);

          _this2.tileLayerManager.updateLayersConfig(_layers, 'visible', tile.isVisible);

          _this2.setPickState(_layers);
        }
      });
      this.parent.renderLayers();

      if (this.tilesetManager.isLoaded) {
        this.parent.emit('tiles-loaded', this.tilesetManager.currentTiles);
      }
    }
  }]);

  return TMSTileLayer;
}(BaseTileLayer);
//# sourceMappingURL=tmsTileLayer.js.map
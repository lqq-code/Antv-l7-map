{"version":3,"sources":["../../src/tile/utils.ts"],"names":["createLayerContainer","DOM","registerLayers","parentLayer","layers","map","layer","container","sceneContainer","setContainer","init","getLayerShape","layerType","layerShape","getAttribute","scale","field","values","getMaskValue","mask","getContainerSize","getContext","width","DPR","height","getBoundingClientRect","readRasterValue","tile","mapService","x","y","bbox","bboxPolygon","minLng","minLat","maxLng","maxLat","tileXY","lngLatToContainer","tileMaxXY","tilePixelWidth","tilePixelHeight","pos","tileWidth","data","tileHeight","indexX","Math","floor","indexY","index","max","readPixel","rendererService","readPixels","getContainer","xInDevicePixel","yInDevicePixel","pickedColors","Uint8Array"],"mappings":"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","sourcesContent":["import {\n  createLayerContainer,\n  ILayer,\n  IMapService,\n  IRendererService,\n} from '@antv/l7-core';\nimport { DOM, Tile } from '@antv/l7-utils';\nimport { Container } from 'inversify';\nexport function registerLayers(parentLayer: ILayer, layers: ILayer[]) {\n  layers.map((layer) => {\n    const container = createLayerContainer(\n      parentLayer.sceneContainer as Container,\n    );\n    layer.setContainer(container, parentLayer.sceneContainer as Container);\n    layer.init();\n  });\n}\n\nexport function getLayerShape(layerType: string, layer: ILayer) {\n  const layerShape = layer.getAttribute('shape');\n  if (layerShape && layerShape.scale?.field) {\n    if (layerShape.scale?.values === 'text') {\n      return [layerShape.scale.field, layerShape.scale.values] as string[];\n    }\n    return layerShape.scale.field as string;\n  }\n  switch (layerType) {\n    case 'PolygonLayer':\n      return 'fill';\n    case 'LineLayer':\n      return 'tileline';\n    case 'PointLayer':\n      return 'circle';\n    case 'RasterLayer':\n      return 'image';\n    default:\n      return '';\n  }\n}\n\nexport function getMaskValue(layerType: string, mask: boolean) {\n  switch (layerType) {\n    case 'PolygonLayer':\n      return true;\n    case 'LineLayer':\n      return true;\n    case 'PointLayer':\n      return false;\n    case 'RasterLayer':\n      return mask;\n    default:\n      return mask;\n  }\n}\n\nexport function getContainerSize(container: HTMLCanvasElement | HTMLElement) {\n  if (!!(container as HTMLCanvasElement).getContext) {\n    return {\n      width: (container as HTMLCanvasElement).width / DOM.DPR,\n      height: (container as HTMLCanvasElement).height / DOM.DPR,\n    };\n  } else {\n    return container.getBoundingClientRect();\n  }\n}\n\nexport function readRasterValue(\n  tile: Tile,\n  mapService: IMapService,\n  x: number,\n  y: number,\n) {\n  const bbox = tile?.bboxPolygon?.bbox || [0, 0, 10, -10];\n\n  const [minLng = 0, minLat = 0, maxLng = 10, maxLat = -10] = bbox;\n\n  const tileXY = mapService.lngLatToContainer([minLng, minLat]);\n  const tileMaxXY = mapService.lngLatToContainer([maxLng, maxLat]);\n\n  const tilePixelWidth = tileMaxXY.x - tileXY.x;\n  const tilePixelHeight = tileXY.y - tileMaxXY.y;\n  const pos = [\n    (x - tileXY.x) / tilePixelWidth, // x\n    (y - tileMaxXY.y) / tilePixelHeight, // y\n  ];\n\n  const tileWidth = tile?.data?.width || 1;\n  const tileHeight = tile?.data?.height || 1;\n\n  const indexX = Math.floor(pos[0] * tileWidth);\n  const indexY = Math.floor(pos[1] * tileHeight);\n  const index = Math.max(0, indexY - 1) * tileWidth + indexX;\n\n  const data = tile?.data?.data[index];\n\n  return data;\n}\n\nexport function readPixel(\n  x: number,\n  y: number,\n  rendererService: IRendererService,\n) {\n  const { readPixels, getContainer } = rendererService;\n  const xInDevicePixel = x * DOM.DPR;\n  const yInDevicePixel = y * DOM.DPR;\n  let { width, height } = getContainerSize(\n    getContainer() as HTMLCanvasElement | HTMLElement,\n  );\n  width *= DOM.DPR;\n  height *= DOM.DPR;\n  if (\n    xInDevicePixel > width - 1 * DOM.DPR ||\n    xInDevicePixel < 0 ||\n    yInDevicePixel > height - 1 * DOM.DPR ||\n    yInDevicePixel < 0\n  ) {\n    return false;\n  }\n\n  const pickedColors = readPixels({\n    x: Math.floor(xInDevicePixel),\n    // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n    y: Math.floor(height - (y + 1) * DOM.DPR),\n    width: 1,\n    height: 1,\n    data: new Uint8Array(1 * 1 * 4),\n  });\n  return pickedColors;\n}\n"],"file":"utils.js"}
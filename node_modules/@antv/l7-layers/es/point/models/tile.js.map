{"version":3,"sources":["../../../src/point/models/tile.ts"],"names":["AttributeType","gl","getCullFace","getMask","BaseModel","PointFillTriangulation","Version","FillModel","layer","getLayerConfig","opacity","strokeOpacity","strokeWidth","stroke","offsets","blend","blur","coord","tileOrigin","dataTextureTest","dataTextureNeedUpdate","judgeStyleAttributes","encodeData","getEncodedData","calDataFrame","cellLength","cellProperties","data","width","height","rowCount","dataTexture","length","createTexture2D","flipY","format","LUMINANCE","type","FLOAT","u_tileOrigin","u_coord","u_isMeter","Number","isMeter","u_blur","u_additive","u_dataTexture","u_cellTypeLayout","getCellTypeLayout","u_opacity","u_stroke_opacity","u_stroke_width","u_stroke_color","getStrokeColor","u_offsets","isOffsetStatic","styleAttributeService","createAttributesAndIndices","unit","version","mapService","L7MAP","GLOBEL","calMeter2Coord","buildModels","getSource","extent","minLng","minLat","maxLng","maxLat","center","MAPBOX","window","mapboxgl","MercatorCoordinate","fromLngLat","lng","lat","offsetInMeters","offsetInMercatorCoordinateUnits","meterInMercatorCoordinateUnits","westCoord","x","y","z","westLnglat","toLngLat","meter2coord","m1","meterToCoord","m2","Boolean","mask","maskInside","getShaders","frag","vert","triangulation","buildLayerModel","moduleName","vertexShader","fragmentShader","depth","enable","getBlend","stencil","cull","face","point_tile_frag","point_tile_vert","destroy","registerStyleAttribute","name","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","size","update","feature","featureIdx","vertex","attributeIdx","extrude","extrudeIndex","Array","isArray","shape","shape2d","shapeIndex","indexOf"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAttribute,\n  IElements,\n  IEncodeFeature,\n  ILayerConfig,\n  IModel,\n  IModelUniform,\n} from '@antv/l7-core';\nimport { getCullFace, getMask } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { IPointLayerStyleOptions } from '../../core/interface';\nimport { PointFillTriangulation } from '../../core/triangulation';\n\nimport point_tile_frag from '../shaders/tile/fill_tile_frag.glsl';\nimport point_tile_vert from '../shaders/tile/fill_tile_vert.glsl';\n\nimport { Version } from '@antv/l7-maps';\nexport default class FillModel extends BaseModel {\n  public meter2coord: number = 1;\n  private isMeter: boolean = false;\n  public getUninforms(): IModelUniform {\n    const {\n      opacity = 1,\n      strokeOpacity = 1,\n      strokeWidth = 0,\n      stroke = 'rgba(0,0,0,0)',\n      offsets = [0, 0],\n      blend,\n      blur = 0,\n      coord = 'lnglat',\n      tileOrigin,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n\n    if (\n      this.dataTextureTest &&\n      this.dataTextureNeedUpdate({\n        opacity,\n        strokeOpacity,\n        strokeWidth,\n        stroke,\n        offsets,\n      })\n    ) {\n      // 判断当前的样式中哪些是需要进行数据映射的，哪些是常量，同时计算用于构建数据纹理的一些中间变量\n      this.judgeStyleAttributes({\n        opacity,\n        strokeOpacity,\n        strokeWidth,\n        stroke,\n        offsets,\n      });\n\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_tileOrigin: tileOrigin || [0, 0],\n      u_coord: coord === 'lnglat' ? 1.0 : 0.0,\n\n      u_isMeter: Number(this.isMeter),\n      u_blur: blur,\n\n      u_additive: blend === 'additive' ? 1.0 : 0.0,\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n\n      u_opacity: Number(opacity),\n      u_stroke_opacity: Number(strokeOpacity),\n      u_stroke_width: Number(strokeWidth),\n      u_stroke_color: this.getStrokeColor(stroke),\n      u_offsets: this.isOffsetStatic(offsets)\n        ? (offsets as [number, number])\n        : [0, 0],\n    };\n  }\n\n  public getAttribute(): {\n    attributes: {\n      [attributeName: string]: IAttribute;\n    };\n    elements: IElements;\n  } {\n    return this.styleAttributeService.createAttributesAndIndices(\n      this.layer.getEncodedData(),\n      PointFillTriangulation,\n    );\n  }\n\n  public initModels(): IModel[] {\n    const {\n      unit = 'l7size',\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    const { version } = this.mapService;\n    if (\n      unit === 'meter' &&\n      version !== Version.L7MAP &&\n      version !== Version.GLOBEL\n    ) {\n      this.isMeter = true;\n      this.calMeter2Coord();\n    }\n\n    return this.buildModels();\n  }\n\n  /**\n   * 计算等面积点图层（unit meter）笛卡尔坐标标度与世界坐标标度的比例\n   * @returns\n   */\n  public calMeter2Coord() {\n    const [minLng, minLat, maxLng, maxLat] = this.layer.getSource().extent;\n    const center = [(minLng + maxLng) / 2, (minLat + maxLat) / 2];\n\n    const { version } = this.mapService;\n    if (version === Version.MAPBOX && window.mapboxgl.MercatorCoordinate) {\n      const coord = window.mapboxgl.MercatorCoordinate.fromLngLat(\n        { lng: center[0], lat: center[1] },\n        0,\n      );\n      const offsetInMeters = 1;\n      const offsetInMercatorCoordinateUnits =\n        offsetInMeters * coord.meterInMercatorCoordinateUnits();\n      const westCoord = new window.mapboxgl.MercatorCoordinate(\n        coord.x - offsetInMercatorCoordinateUnits,\n        coord.y,\n        coord.z,\n      );\n      const westLnglat = westCoord.toLngLat();\n\n      this.meter2coord = center[0] - westLnglat.lng;\n      return;\n    }\n\n    // @ts-ignore\n    const m1 = this.mapService.meterToCoord(center, [minLng, minLat]);\n    // @ts-ignore\n    const m2 = this.mapService.meterToCoord(center, [\n      maxLng === minLng ? maxLng + 0.1 : maxLng,\n      maxLat === minLat ? minLat + 0.1 : maxLat,\n    ]);\n    this.meter2coord = (m1 + m2) / 2;\n    if (!Boolean(this.meter2coord)) {\n      // Tip: 兼容单个数据导致的 m1、m2 为 NaN\n      this.meter2coord = 7.70681090738883;\n    }\n  }\n\n  public buildModels(): IModel[] {\n    const {\n      mask = false,\n      maskInside = true,\n    } = this.layer.getLayerConfig() as Partial<\n      ILayerConfig & IPointLayerStyleOptions\n    >;\n    const { frag, vert, type } = this.getShaders();\n\n    this.layer.triangulation = PointFillTriangulation;\n    return [\n      this.layer.buildLayerModel({\n        // primitive: gl.POINTS,\n        moduleName: type,\n        vertexShader: vert,\n        fragmentShader: frag,\n        triangulation: PointFillTriangulation,\n        depth: { enable: false },\n        blend: this.getBlend(),\n        stencil: getMask(mask, maskInside),\n        cull: {\n          enable: true,\n          face: getCullFace(this.mapService.version),\n        },\n      }),\n    ];\n  }\n\n  /**\n   * 根据 animateOption 的值返回对应的 shader 代码\n   * @returns\n   */\n  public getShaders(): { frag: string; vert: string; type: string } {\n    return {\n      frag: point_tile_frag,\n      vert: point_tile_vert,\n      type: 'point_fill_tile',\n    };\n  }\n\n  public clearModels() {\n    this.dataTexture?.destroy();\n  }\n\n  // overwrite baseModel func\n  protected registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'extrude',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Extrude',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];\n\n          const extrudeIndex = (attributeIdx % 4) * 3;\n          return [\n            extrude[extrudeIndex],\n            extrude[extrudeIndex + 1],\n            extrude[extrudeIndex + 2],\n          ];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 5 } = feature;\n          // console.log('featureIdx', featureIdx, feature)\n          return Array.isArray(size)\n            ? [size[0] * this.meter2coord]\n            : [(size as number) * this.meter2coord];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'shape',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Shape',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { shape = 2 } = feature;\n          const shape2d = this.layer.getLayerConfig().shape2d as string[];\n          const shapeIndex = shape2d.indexOf(shape as string);\n          return [shapeIndex];\n        },\n      },\n    });\n  }\n}\n"],"file":"tile.js"}
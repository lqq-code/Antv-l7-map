"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _BaseLayer2 = _interopRequireDefault(require("../../core/BaseLayer"));

var _tile = _interopRequireDefault(require("../../line/models/tile"));

var _text = _interopRequireDefault(require("../../point/models/text"));

var _tile2 = _interopRequireDefault(require("../../point/models/tile"));

var _tile3 = _interopRequireDefault(require("../../polygon/models/tile"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var VectorLayer = function (_BaseLayer) {
  (0, _inherits2.default)(VectorLayer, _BaseLayer);

  var _super = _createSuper(VectorLayer);

  function VectorLayer() {
    var _this;

    (0, _classCallCheck2.default)(this, VectorLayer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isVector", true);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", _this.layerType);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "pickedID", null);
    return _this;
  }

  (0, _createClass2.default)(VectorLayer, [{
    key: "getPickID",
    value: function getPickID() {
      return this.pickedID;
    }
  }, {
    key: "setPickID",
    value: function setPickID() {
      return this.pickedID;
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      var model = this.getModelType();
      this.layerModel = new model(this);
      this.models = this.layerModel.initModels();
    }
  }, {
    key: "rebuildModels",
    value: function rebuildModels() {
      this.models = this.layerModel.buildModels();
    }
  }, {
    key: "getModelType",
    value: function getModelType() {
      switch (this.layerType) {
        case 'PolygonLayer':
          return _tile3.default;

        case 'LineLayer':
          return _tile.default;

        case 'PointLayer':
          return this.getPointModel();

        default:
          return _tile2.default;
      }
    }
  }, {
    key: "getPointModel",
    value: function getPointModel() {
      var layerData = this.getEncodedData();

      var _this$getLayerConfig = this.getLayerConfig(),
          shape2d = _this$getLayerConfig.shape2d;

      var item = layerData.find(function (fe) {
        return fe.hasOwnProperty('shape');
      });

      if (item) {
        var shape = item.shape;

        if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {
          return _tile2.default;
        } else {
          return _text.default;
        }
      } else {
        return _tile2.default;
      }
    }
  }, {
    key: "getConfigSchema",
    value: function getConfigSchema() {
      return {
        properties: {
          opacity: {
            type: 'number',
            minimum: 0,
            maximum: 1
          }
        }
      };
    }
  }, {
    key: "getDefaultConfig",
    value: function getDefaultConfig() {
      return {};
    }
  }]);
  return VectorLayer;
}(_BaseLayer2.default);

exports.default = VectorLayer;
//# sourceMappingURL=vectorLayer.js.map
{"version":3,"sources":["../../../src/tile/tileFactory/vectorLayer.ts"],"names":["VectorLayer","layerType","pickedID","model","getModelType","layerModel","models","initModels","buildModels","polygonFillModel","lineFillModel","getPointModel","pointFillModel","layerData","getEncodedData","getLayerConfig","shape2d","item","find","fe","hasOwnProperty","shape","indexOf","pointTextModel","properties","opacity","type","minimum","maximum","BaseLayer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;;AAMA;;AACA;;AACA;;AACA;;;;;;IAEqBA,W;;;;;;;;;;;;;;;2FAKQ,I;uFACL,MAAKC,S;2FAEO,I;;;;;;WAElC,qBAAmB;AACjB,aAAO,KAAKC,QAAZ;AACD;;;WAED,qBAAmB;AACjB,aAAO,KAAKA,QAAZ;AACD;;;WAED,uBAAqB;AACnB,UAAMC,KAAK,GAAG,KAAKC,YAAL,EAAd;AACA,WAAKC,UAAL,GAAkB,IAAIF,KAAJ,CAAU,IAAV,CAAlB;AACA,WAAKG,MAAL,GAAc,KAAKD,UAAL,CAAgBE,UAAhB,EAAd;AACD;;;WAED,yBAAuB;AACrB,WAAKD,MAAL,GAAc,KAAKD,UAAL,CAAgBG,WAAhB,EAAd;AACD;;;WAED,wBAAyB;AACvB,cAAQ,KAAKP,SAAb;AACE,aAAK,cAAL;AACE,iBAAOQ,cAAP;;AACF,aAAK,WAAL;AACE,iBAAOC,aAAP;;AACF,aAAK,YAAL;AACE,iBAAO,KAAKC,aAAL,EAAP;;AACF;AACE,iBAAOC,cAAP;AARJ;AAUD;;;WAED,yBAA0B;AACxB,UAAMC,SAAS,GAAG,KAAKC,cAAL,EAAlB;;AACA,iCAAoB,KAAKC,cAAL,EAApB;AAAA,UAAQC,OAAR,wBAAQA,OAAR;;AACA,UAAMC,IAAI,GAAGJ,SAAS,CAACK,IAAV,CAAe,UAACC,EAAD,EAAwB;AAClD,eAAOA,EAAE,CAACC,cAAH,CAAkB,OAAlB,CAAP;AACD,OAFY,CAAb;;AAIA,UAAIH,IAAJ,EAAU;AACR,YAAMI,KAAK,GAAGJ,IAAI,CAACI,KAAnB;;AACA,YAAI,CAAAL,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEM,OAAT,CAAiBD,KAAjB,OAAsC,CAAC,CAA3C,EAA8C;AAC5C,iBAAOT,cAAP;AACD,SAFD,MAEO;AACL,iBAAOW,aAAP;AACD;AACF,OAPD,MAOO;AACL,eAAOX,cAAP;AACD;AACF;;;WAED,2BAA4B;AAC1B,aAAO;AACLY,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EAAE,QADC;AAEPC,YAAAA,OAAO,EAAE,CAFF;AAGPC,YAAAA,OAAO,EAAE;AAHF;AADC;AADP,OAAP;AASD;;;WAED,4BAA6B;AAC3B,aAAO,EAAP;AACD;;;EA1EsCC,mB","sourcesContent":["import { IEncodeFeature } from '@antv/l7-core';\nimport BaseLayer from '../../core/BaseLayer';\nimport {\n  ILineLayerStyleOptions,\n  IPointLayerStyleOptions,\n  IPolygonLayerStyleOptions,\n} from '../../core/interface';\nimport lineFillModel from '../../line/models/tile';\nimport pointTextModel from '../../point/models/text';\nimport pointFillModel from '../../point/models/tile';\nimport polygonFillModel from '../../polygon/models/tile';\n\nexport default class VectorLayer extends BaseLayer<\n  Partial<\n    IPolygonLayerStyleOptions & ILineLayerStyleOptions & IPointLayerStyleOptions\n  >\n> {\n  public isVector: boolean = true;\n  public type: string = this.layerType as string;\n  // Tip: 单独被 tile 瓦片的渲染链路使用（用于优化性能）\n  private pickedID: number | null = null;\n\n  public getPickID() {\n    return this.pickedID;\n  }\n\n  public setPickID() {\n    return this.pickedID;\n  }\n\n  public buildModels() {\n    const model = this.getModelType();\n    this.layerModel = new model(this);\n    this.models = this.layerModel.initModels();\n  }\n\n  public rebuildModels() {\n    this.models = this.layerModel.buildModels();\n  }\n\n  protected getModelType() {\n    switch (this.layerType) {\n      case 'PolygonLayer':\n        return polygonFillModel;\n      case 'LineLayer':\n        return lineFillModel;\n      case 'PointLayer':\n        return this.getPointModel();\n      default:\n        return pointFillModel;\n    }\n  }\n\n  protected getPointModel() {\n    const layerData = this.getEncodedData();\n    const { shape2d } = this.getLayerConfig();\n    const item = layerData.find((fe: IEncodeFeature) => {\n      return fe.hasOwnProperty('shape');\n    });\n    // only support pointFill & pointText now\n    if (item) {\n      const shape = item.shape;\n      if (shape2d?.indexOf(shape as string) !== -1) {\n        return pointFillModel;\n      } else {\n        return pointTextModel;\n      }\n    } else {\n      return pointFillModel;\n    }\n  }\n\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  protected getDefaultConfig() {\n    return {};\n  }\n}\n"],"file":"vectorLayer.js"}
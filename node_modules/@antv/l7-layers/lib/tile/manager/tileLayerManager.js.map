{"version":3,"sources":["../../../src/tile/manager/tileLayerManager.ts"],"names":["TileLayerManager","parent","mapService","rendererService","pickingService","layerService","children","layerChildren","tilePickManager","TilePickManager","tileConfigManager","TileConfigManager","setSubLayerInitOptipn","setConfigListener","initTileFactory","tile","tileFactory","createTile","initOptions","layers","key","value","map","layer","style","mask","updateLayerConfig","push","layerIDList","refresh","remveLayerList","cacheLayerList","filter","child","includes","id","destroy","layerIndex","indexOf","splice","layerID","forEach","slice","length","checkConfig","normalRender","target","pickRender","getLayerConfig","zIndex","opacity","stroke","strokeWidth","strokeOpacity","clampLow","clampHigh","domain","rampColors","colors","positions","featureId","sourceLayer","colorValue","getAttributeScale","sizeValue","source","getSource","data","tilesetOptions","coords","layerShape","type","rampColorsData","layerType","shape","color","size","setConfig","getAttribute","scale","on","updateConfigs","updateStyle","updateValue","scaleValue","setStyleAttributeField","layerConfig","config","updateLayersConfig","TileFactory","parser"],"mappings":"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","sourcesContent":["import {\n  IInteractionTarget,\n  ILayer,\n  ILayerService,\n  IMapService,\n  IPickingService,\n  IRendererService,\n  ISubLayerInitOptions,\n  ITileLayerManager,\n  ITilePickManager,\n  ScaleAttributeType,\n} from '@antv/l7-core';\nimport { generateColorRamp, IColorRamp, Tile } from '@antv/l7-utils';\nimport { getTileFactory, ITileFactory, TileType } from '../tileFactory';\nimport { getLayerShape, getMaskValue } from '../utils';\nimport TileConfigManager, { ITileConfigManager } from './tileConfigManager';\nimport TilePickManager from './tilePickerManager';\nexport class TileLayerManager implements ITileLayerManager {\n  public sourceLayer: string;\n  public parent: ILayer;\n  public children: ILayer[];\n  public mapService: IMapService;\n  public rendererService: IRendererService;\n  public tilePickManager: ITilePickManager;\n  public tileConfigManager: ITileConfigManager;\n  private tileFactory: ITileFactory;\n  private initOptions: ISubLayerInitOptions;\n  private rampColorsData: any;\n  constructor(\n    parent: ILayer,\n    mapService: IMapService,\n    rendererService: IRendererService,\n    pickingService: IPickingService,\n    layerService: ILayerService,\n  ) {\n    this.parent = parent;\n    this.children = parent.layerChildren;\n    this.mapService = mapService;\n    this.rendererService = rendererService;\n    this.tilePickManager = new TilePickManager(\n      parent,\n      rendererService,\n      pickingService,\n      this.children,\n      layerService,\n    );\n    this.tileConfigManager = new TileConfigManager();\n\n    this.setSubLayerInitOptipn();\n    this.setConfigListener();\n    this.initTileFactory();\n  }\n\n  public createTile(tile: Tile) {\n    return this.tileFactory.createTile(tile, this.initOptions);\n  }\n\n  public updateLayersConfig(layers: ILayer[], key: string, value: any) {\n    layers.map((layer) => {\n      if (key === 'mask') {\n        // Tip: 栅格瓦片生效、设置全局的 mask、瓦片被全局的 mask 影响\n        layer.style({\n          mask: value,\n        });\n      } else {\n        layer.updateLayerConfig({\n          [key]: value,\n        });\n      }\n    });\n  }\n\n  public addChild(layer: ILayer) {\n    this.children.push(layer);\n  }\n\n  public addChilds(layers: ILayer[]) {\n    this.children.push(...layers);\n  }\n\n  public removeChilds(layerIDList: string[], refresh = true) {\n    const remveLayerList: ILayer[] = [];\n    const cacheLayerList: ILayer[] = [];\n    this.children.filter((child) => {\n      layerIDList.includes(child.id)\n        ? remveLayerList.push(child)\n        : cacheLayerList.push(child);\n    });\n    remveLayerList.map((layer) => layer.destroy(refresh));\n    this.children = cacheLayerList;\n  }\n\n  public removeChild(layer: ILayer) {\n    const layerIndex = this.children.indexOf(layer);\n    if (layerIndex > -1) {\n      this.children.splice(layerIndex, 1);\n    }\n    layer.destroy();\n  }\n\n  public getChilds(layerIDList: string[]) {\n    return this.children.filter((child) => layerIDList.includes(child.id));\n  }\n\n  public getChild(layerID: string) {\n    return this.children.filter((child) => child.id === layerID)[0];\n  }\n\n  public clearChild() {\n    this.children.forEach((layer: any) => {\n      layer.destroy();\n    });\n\n    this.children.slice(0, this.children.length);\n  }\n\n  public hasChild(layer: ILayer) {\n    return this.children.includes(layer);\n  }\n\n  public render(): void {\n    this.tileConfigManager?.checkConfig(this.parent);\n    this.tilePickManager?.normalRender(this.children);\n  }\n\n  public pickLayers(target: IInteractionTarget) {\n    return this.tilePickManager?.pickRender(this.children, target);\n  }\n\n  private setSubLayerInitOptipn() {\n    const {\n      zIndex = 0,\n      opacity = 1,\n      mask = false,\n      stroke = '#fff',\n      strokeWidth = 0,\n      strokeOpacity = 1,\n\n      clampLow = true,\n      clampHigh = true,\n      domain = [0, 1],\n      rampColors = {\n        colors: [\n          'rgb(166,97,26)',\n          'rgb(223,194,125)',\n          'rgb(245,245,245)',\n          'rgb(128,205,193)',\n          'rgb(1,133,113)',\n        ],\n        positions: [0, 0.25, 0.5, 0.75, 1.0],\n      },\n      featureId = 'id',\n      sourceLayer,\n    } = this.parent.getLayerConfig() as ISubLayerInitOptions;\n\n    const colorValue = this.tileConfigManager.getAttributeScale(\n      this.parent,\n      'color',\n    );\n    const sizeValue = this.tileConfigManager.getAttributeScale(\n      this.parent,\n      'size',\n    );\n    const source = this.parent.getSource();\n    const { coords } = source?.data?.tilesetOptions || {};\n\n    const layerShape = getLayerShape(this.parent.type, this.parent);\n\n    if (rampColors) {\n      // 构建统一的色带贴图\n      this.rampColorsData = generateColorRamp(rampColors as IColorRamp);\n    }\n\n    this.initOptions = {\n      layerType: this.parent.type,\n      shape: layerShape,\n      zIndex,\n      opacity,\n      sourceLayer,\n      coords,\n      featureId,\n      color: colorValue,\n      size: sizeValue,\n      mask: getMaskValue(this.parent.type, mask),\n      stroke,\n      strokeWidth,\n      strokeOpacity,\n      // raster tiff\n      clampLow,\n      clampHigh,\n      domain,\n      rampColors,\n      rampColorsData: this.rampColorsData,\n    };\n  }\n\n  private setConfigListener() {\n    // RasterLayer PolygonLayer LineLayer PointLayer\n    // All Tile Layer Need Listen\n    this.tileConfigManager.setConfig('opacity', this.initOptions.opacity);\n    this.tileConfigManager.setConfig('zIndex', this.initOptions.zIndex);\n    this.tileConfigManager.setConfig('mask', this.initOptions.mask);\n\n    if (this.parent.type === 'RasterLayer') {\n      // Raster Tile Layer Need Listen\n      this.tileConfigManager.setConfig(\n        'rampColors',\n        this.initOptions.rampColors,\n      );\n      this.tileConfigManager.setConfig('domain', this.initOptions.domain);\n      this.tileConfigManager.setConfig('clampHigh', this.initOptions.clampHigh);\n      this.tileConfigManager.setConfig('clampLow', this.initOptions.clampLow);\n    } else {\n      // Vector Tile Layer Need Listen\n      this.tileConfigManager.setConfig('stroke', this.initOptions.stroke);\n      this.tileConfigManager.setConfig(\n        'strokeWidth',\n        this.initOptions.strokeWidth,\n      );\n      this.tileConfigManager.setConfig(\n        'strokeOpacity',\n        this.initOptions.strokeOpacity,\n      );\n      this.tileConfigManager.setConfig(\n        'color',\n        this.parent.getAttribute('color')?.scale,\n      );\n      this.tileConfigManager.setConfig(\n        'shape',\n        this.parent.getAttribute('shape')?.scale,\n      );\n      this.tileConfigManager.setConfig(\n        'size',\n        this.parent.getAttribute('size')?.scale,\n      );\n    }\n\n    this.tileConfigManager.on('updateConfig', (updateConfigs) => {\n      updateConfigs.map((key: string) => {\n        this.updateStyle(key);\n        return '';\n      });\n    });\n  }\n\n  private updateStyle(style: string) {\n    let updateValue = null;\n    if (['size', 'color', 'shape'].includes(style)) {\n      const scaleValue = this.parent.getAttribute(style)?.scale;\n      if (!scaleValue) {\n        return;\n      }\n      updateValue = scaleValue;\n      this.children.map((child) => {\n        this.tileFactory.setStyleAttributeField(\n          child,\n          style as ScaleAttributeType,\n          scaleValue,\n        );\n        return '';\n      });\n    } else {\n      const layerConfig = this.parent.getLayerConfig() as ISubLayerInitOptions;\n      if (!(style in layerConfig)) {\n        return;\n      }\n      // @ts-ignore\n      const config = layerConfig[style];\n      updateValue = config;\n      this.updateLayersConfig(this.children, style, config);\n      if (style === 'rampColors' && config) {\n        this.rampColorsData = generateColorRamp(config as IColorRamp);\n      }\n    }\n    // @ts-ignore\n    this.initOptions[style] = updateValue;\n  }\n\n  private initTileFactory() {\n    const source = this.parent.getSource();\n    const TileFactory = getTileFactory(\n      this.parent.type as TileType,\n      source.parser,\n    );\n    this.tileFactory = new TileFactory({\n      parent: this.parent,\n      mapService: this.mapService,\n      rendererService: this.rendererService,\n    });\n  }\n}\n"],"file":"tileLayerManager.js"}
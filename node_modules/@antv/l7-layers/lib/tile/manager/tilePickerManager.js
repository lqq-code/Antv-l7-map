"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _eventemitter = require("eventemitter3");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var TilePickManager = function (_EventEmitter) {
  (0, _inherits2.default)(TilePickManager, _EventEmitter);

  var _super = _createSuper(TilePickManager);

  function TilePickManager(parent, rendererService, pickingService, children, layerService) {
    var _this;

    (0, _classCallCheck2.default)(this, TilePickManager);
    _this = _super.call(this);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isLastPicked", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rendererService", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "pickingService", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "layerService", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "children", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "parent", void 0);
    _this.parent = parent;
    _this.rendererService = rendererService;
    _this.pickingService = pickingService;
    _this.layerService = layerService;
    _this.children = children;
    return _this;
  }

  (0, _createClass2.default)(TilePickManager, [{
    key: "normalRender",
    value: function normalRender(layers) {
      var _this2 = this;

      layers.filter(function (layer) {
        return layer.inited;
      }).filter(function (layer) {
        return layer.isVisible();
      }).map(function (layer) {
        layer.hooks.beforeRenderData.call();
        layer.hooks.beforeRender.call();

        if (layer.masks.length > 0) {
          _this2.rendererService.clear({
            stencil: 0,
            depth: 1,
            framebuffer: null
          });

          layer.masks.map(function (m) {
            m.hooks.beforeRender.call();
            m.render();
            m.hooks.afterRender.call();
          });
        }

        layer.render();
        layer.hooks.afterRender.call();
      });
    }
  }, {
    key: "pickRender",
    value: function pickRender(layers, target) {
      var _this3 = this;

      if (this.parent.type === 'RasterLayer') {
        this.renderMask(this.parent);
      }

      var isPicked = layers.filter(function (layer) {
        return _this3.parent.needPick(target.type) && layer.inited && layer.isVisible();
      }).some(function (layer) {
        layer.hooks.beforePickingEncode.call();

        if (layer.masks.length > 0) {
          _this3.rendererService.clear({
            stencil: 0,
            depth: 1,
            framebuffer: null
          });

          layer.masks.map(function (m) {
            m.hooks.beforeRender.call();
            m.render();
            m.hooks.afterRender.call();
          });
        }

        layer.renderModels(true);
        layer.hooks.afterPickingEncode.call();

        var layerPicked = _this3.pickingService.pickFromPickingFBO(layer, target);

        if (layerPicked && _this3.parent.type !== 'RasterLayer') {
          _this3.emit('pick', {
            type: target.type,
            pickedColors: _this3.pickingService.pickedColors,
            layer: layer
          });

          _this3.pickingService.pickedTileLayers = [_this3.parent];
        }

        return layerPicked;
      });

      if (this.parent.type !== 'RasterLayer' && !isPicked && this.isLastPicked && target.type !== 'click') {
        this.pickingService.pickedTileLayers = [];
        this.emit('unpick', {});
        this.beforeHighlight([0, 0, 0]);
      }

      this.isLastPicked = isPicked;
      return isPicked;
    }
  }, {
    key: "clearPick",
    value: function clearPick() {
      this.children.filter(function (child) {
        return child.inited && child.isVisible();
      }).map(function (layer) {
        layer.hooks.beforeSelect.call([0, 0, 0]);
      });
      this.pickingService.pickedTileLayers = [];
    }
  }, {
    key: "beforeHighlight",
    value: function beforeHighlight(pickedColors) {
      this.children.filter(function (child) {
        return child.inited && child.isVisible();
      }).map(function (child) {
        child.hooks.beforeHighlight.call(pickedColors);
      });
    }
  }, {
    key: "beforeSelect",
    value: function beforeSelect(pickedColors) {
      this.children.filter(function (child) {
        return child.inited && child.isVisible();
      }).map(function (layer) {
        layer.hooks.beforeSelect.call(pickedColors);
      });
    }
  }, {
    key: "renderMask",
    value: function renderMask(layer) {
      if (layer.inited && layer.isVisible()) {
        layer.hooks.beforeRender.call();

        if (layer.masks.length > 0) {
          this.rendererService.clear({
            stencil: 0,
            depth: 1,
            framebuffer: null
          });
          layer.masks.map(function (m) {
            m.hooks.beforeRender.call();
            m.render();
            m.hooks.afterRender.call();
          });
        }

        layer.hooks.afterRender.call();
      }
    }
  }]);
  return TilePickManager;
}(_eventemitter.EventEmitter);

exports.default = TilePickManager;
//# sourceMappingURL=tilePickerManager.js.map
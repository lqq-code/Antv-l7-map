"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _eventemitter = _interopRequireDefault(require("eventemitter3"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var TileConfigManager = function (_EventEmitter) {
  (0, _inherits2.default)(TileConfigManager, _EventEmitter);

  var _super = _createSuper(TileConfigManager);

  function TileConfigManager() {
    var _this;

    (0, _classCallCheck2.default)(this, TileConfigManager);
    _this = _super.call(this);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cacheConfig", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "checkConfigList", []);
    _this.cacheConfig = new Map();
    return _this;
  }

  (0, _createClass2.default)(TileConfigManager, [{
    key: "setConfig",
    value: function setConfig(key, value) {
      if (!this.checkConfigList.includes(key)) {
        this.checkConfigList.push(key);
      }

      this.cacheConfig.set(key, value);
    }
  }, {
    key: "removeConfig",
    value: function removeConfig(key) {
      var configIndex = this.checkConfigList.indexOf(key);

      if (configIndex > -1) {
        this.cacheConfig.delete(key);
        this.checkConfigList.splice(configIndex, 1);
      }
    }
  }, {
    key: "checkConfig",
    value: function checkConfig(layer) {
      var _this2 = this;

      if (!layer.inited) {
        return;
      }

      var layerConfig = layer.getLayerConfig();
      var updateConfigs = [];
      this.checkConfigList.map(function (key) {
        var cacheConfig = _this2.cacheConfig.get(key);

        var currentConfig;

        if (['color', 'size', 'shape'].includes(key)) {
          var _layer$getAttribute;

          currentConfig = (_layer$getAttribute = layer.getAttribute(key)) === null || _layer$getAttribute === void 0 ? void 0 : _layer$getAttribute.scale;
        } else {
          if (!(key in layerConfig)) {
            return;
          }

          currentConfig = layerConfig[key];
        }

        if (!(0, _isEqual2.default)(cacheConfig, currentConfig)) {
          updateConfigs.push(key);

          _this2.setConfig(key, currentConfig);
        }
      });

      if (updateConfigs.length > 0) {
        console.warn('tile config cache update!', updateConfigs);
        this.emit('updateConfig', updateConfigs);
      }
    }
  }, {
    key: "getAttributeScale",
    value: function getAttributeScale(layer, name) {
      var attribute = layer.getAttribute(name);
      var scaleValue = {
        field: undefined,
        values: undefined,
        callback: undefined
      };

      if (attribute && attribute.scale) {
        var _attribute$scale = attribute.scale,
            field = _attribute$scale.field,
            values = _attribute$scale.values,
            callback = _attribute$scale.callback;
        scaleValue.field = field;
        scaleValue.values = values;
        scaleValue.callback = callback;
      }

      return scaleValue;
    }
  }]);
  return TileConfigManager;
}(_eventemitter.default);

exports.default = TileConfigManager;
//# sourceMappingURL=tileConfigManager.js.map
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TileLayerManager = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _l7Utils = require("@antv/l7-utils");

var _tileFactory = require("../tileFactory");

var _utils = require("../utils");

var _tileConfigManager = _interopRequireDefault(require("./tileConfigManager"));

var _tilePickerManager = _interopRequireDefault(require("./tilePickerManager"));

var TileLayerManager = function () {
  function TileLayerManager(parent, mapService, rendererService, pickingService, layerService) {
    (0, _classCallCheck2.default)(this, TileLayerManager);
    (0, _defineProperty2.default)(this, "sourceLayer", void 0);
    (0, _defineProperty2.default)(this, "parent", void 0);
    (0, _defineProperty2.default)(this, "children", void 0);
    (0, _defineProperty2.default)(this, "mapService", void 0);
    (0, _defineProperty2.default)(this, "rendererService", void 0);
    (0, _defineProperty2.default)(this, "tilePickManager", void 0);
    (0, _defineProperty2.default)(this, "tileConfigManager", void 0);
    (0, _defineProperty2.default)(this, "tileFactory", void 0);
    (0, _defineProperty2.default)(this, "initOptions", void 0);
    (0, _defineProperty2.default)(this, "rampColorsData", void 0);
    this.parent = parent;
    this.children = parent.layerChildren;
    this.mapService = mapService;
    this.rendererService = rendererService;
    this.tilePickManager = new _tilePickerManager.default(parent, rendererService, pickingService, this.children, layerService);
    this.tileConfigManager = new _tileConfigManager.default();
    this.setSubLayerInitOptipn();
    this.setConfigListener();
    this.initTileFactory();
  }

  (0, _createClass2.default)(TileLayerManager, [{
    key: "createTile",
    value: function createTile(tile) {
      return this.tileFactory.createTile(tile, this.initOptions);
    }
  }, {
    key: "updateLayersConfig",
    value: function updateLayersConfig(layers, key, value) {
      layers.map(function (layer) {
        if (key === 'mask') {
          layer.style({
            mask: value
          });
        } else {
          layer.updateLayerConfig((0, _defineProperty2.default)({}, key, value));
        }
      });
    }
  }, {
    key: "addChild",
    value: function addChild(layer) {
      this.children.push(layer);
    }
  }, {
    key: "addChilds",
    value: function addChilds(layers) {
      var _this$children;

      (_this$children = this.children).push.apply(_this$children, (0, _toConsumableArray2.default)(layers));
    }
  }, {
    key: "removeChilds",
    value: function removeChilds(layerIDList) {
      var refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var remveLayerList = [];
      var cacheLayerList = [];
      this.children.filter(function (child) {
        layerIDList.includes(child.id) ? remveLayerList.push(child) : cacheLayerList.push(child);
      });
      remveLayerList.map(function (layer) {
        return layer.destroy(refresh);
      });
      this.children = cacheLayerList;
    }
  }, {
    key: "removeChild",
    value: function removeChild(layer) {
      var layerIndex = this.children.indexOf(layer);

      if (layerIndex > -1) {
        this.children.splice(layerIndex, 1);
      }

      layer.destroy();
    }
  }, {
    key: "getChilds",
    value: function getChilds(layerIDList) {
      return this.children.filter(function (child) {
        return layerIDList.includes(child.id);
      });
    }
  }, {
    key: "getChild",
    value: function getChild(layerID) {
      return this.children.filter(function (child) {
        return child.id === layerID;
      })[0];
    }
  }, {
    key: "clearChild",
    value: function clearChild() {
      this.children.forEach(function (layer) {
        layer.destroy();
      });
      this.children.slice(0, this.children.length);
    }
  }, {
    key: "hasChild",
    value: function hasChild(layer) {
      return this.children.includes(layer);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$tileConfigManag, _this$tilePickManager;

      (_this$tileConfigManag = this.tileConfigManager) === null || _this$tileConfigManag === void 0 ? void 0 : _this$tileConfigManag.checkConfig(this.parent);
      (_this$tilePickManager = this.tilePickManager) === null || _this$tilePickManager === void 0 ? void 0 : _this$tilePickManager.normalRender(this.children);
    }
  }, {
    key: "pickLayers",
    value: function pickLayers(target) {
      var _this$tilePickManager2;

      return (_this$tilePickManager2 = this.tilePickManager) === null || _this$tilePickManager2 === void 0 ? void 0 : _this$tilePickManager2.pickRender(this.children, target);
    }
  }, {
    key: "setSubLayerInitOptipn",
    value: function setSubLayerInitOptipn() {
      var _source$data;

      var _ref = this.parent.getLayerConfig(),
          _ref$zIndex = _ref.zIndex,
          zIndex = _ref$zIndex === void 0 ? 0 : _ref$zIndex,
          _ref$opacity = _ref.opacity,
          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
          _ref$mask = _ref.mask,
          mask = _ref$mask === void 0 ? false : _ref$mask,
          _ref$stroke = _ref.stroke,
          stroke = _ref$stroke === void 0 ? '#fff' : _ref$stroke,
          _ref$strokeWidth = _ref.strokeWidth,
          strokeWidth = _ref$strokeWidth === void 0 ? 0 : _ref$strokeWidth,
          _ref$strokeOpacity = _ref.strokeOpacity,
          strokeOpacity = _ref$strokeOpacity === void 0 ? 1 : _ref$strokeOpacity,
          _ref$clampLow = _ref.clampLow,
          clampLow = _ref$clampLow === void 0 ? true : _ref$clampLow,
          _ref$clampHigh = _ref.clampHigh,
          clampHigh = _ref$clampHigh === void 0 ? true : _ref$clampHigh,
          _ref$domain = _ref.domain,
          domain = _ref$domain === void 0 ? [0, 1] : _ref$domain,
          _ref$rampColors = _ref.rampColors,
          rampColors = _ref$rampColors === void 0 ? {
        colors: ['rgb(166,97,26)', 'rgb(223,194,125)', 'rgb(245,245,245)', 'rgb(128,205,193)', 'rgb(1,133,113)'],
        positions: [0, 0.25, 0.5, 0.75, 1.0]
      } : _ref$rampColors,
          _ref$featureId = _ref.featureId,
          featureId = _ref$featureId === void 0 ? 'id' : _ref$featureId,
          sourceLayer = _ref.sourceLayer;

      var colorValue = this.tileConfigManager.getAttributeScale(this.parent, 'color');
      var sizeValue = this.tileConfigManager.getAttributeScale(this.parent, 'size');
      var source = this.parent.getSource();

      var _ref2 = (source === null || source === void 0 ? void 0 : (_source$data = source.data) === null || _source$data === void 0 ? void 0 : _source$data.tilesetOptions) || {},
          coords = _ref2.coords;

      var layerShape = (0, _utils.getLayerShape)(this.parent.type, this.parent);

      if (rampColors) {
        this.rampColorsData = (0, _l7Utils.generateColorRamp)(rampColors);
      }

      this.initOptions = {
        layerType: this.parent.type,
        shape: layerShape,
        zIndex: zIndex,
        opacity: opacity,
        sourceLayer: sourceLayer,
        coords: coords,
        featureId: featureId,
        color: colorValue,
        size: sizeValue,
        mask: (0, _utils.getMaskValue)(this.parent.type, mask),
        stroke: stroke,
        strokeWidth: strokeWidth,
        strokeOpacity: strokeOpacity,
        clampLow: clampLow,
        clampHigh: clampHigh,
        domain: domain,
        rampColors: rampColors,
        rampColorsData: this.rampColorsData
      };
    }
  }, {
    key: "setConfigListener",
    value: function setConfigListener() {
      var _this = this;

      this.tileConfigManager.setConfig('opacity', this.initOptions.opacity);
      this.tileConfigManager.setConfig('zIndex', this.initOptions.zIndex);
      this.tileConfigManager.setConfig('mask', this.initOptions.mask);

      if (this.parent.type === 'RasterLayer') {
        this.tileConfigManager.setConfig('rampColors', this.initOptions.rampColors);
        this.tileConfigManager.setConfig('domain', this.initOptions.domain);
        this.tileConfigManager.setConfig('clampHigh', this.initOptions.clampHigh);
        this.tileConfigManager.setConfig('clampLow', this.initOptions.clampLow);
      } else {
        var _this$parent$getAttri, _this$parent$getAttri2, _this$parent$getAttri3;

        this.tileConfigManager.setConfig('stroke', this.initOptions.stroke);
        this.tileConfigManager.setConfig('strokeWidth', this.initOptions.strokeWidth);
        this.tileConfigManager.setConfig('strokeOpacity', this.initOptions.strokeOpacity);
        this.tileConfigManager.setConfig('color', (_this$parent$getAttri = this.parent.getAttribute('color')) === null || _this$parent$getAttri === void 0 ? void 0 : _this$parent$getAttri.scale);
        this.tileConfigManager.setConfig('shape', (_this$parent$getAttri2 = this.parent.getAttribute('shape')) === null || _this$parent$getAttri2 === void 0 ? void 0 : _this$parent$getAttri2.scale);
        this.tileConfigManager.setConfig('size', (_this$parent$getAttri3 = this.parent.getAttribute('size')) === null || _this$parent$getAttri3 === void 0 ? void 0 : _this$parent$getAttri3.scale);
      }

      this.tileConfigManager.on('updateConfig', function (updateConfigs) {
        updateConfigs.map(function (key) {
          _this.updateStyle(key);

          return '';
        });
      });
    }
  }, {
    key: "updateStyle",
    value: function updateStyle(style) {
      var _this2 = this;

      var updateValue = null;

      if (['size', 'color', 'shape'].includes(style)) {
        var _this$parent$getAttri4;

        var scaleValue = (_this$parent$getAttri4 = this.parent.getAttribute(style)) === null || _this$parent$getAttri4 === void 0 ? void 0 : _this$parent$getAttri4.scale;

        if (!scaleValue) {
          return;
        }

        updateValue = scaleValue;
        this.children.map(function (child) {
          _this2.tileFactory.setStyleAttributeField(child, style, scaleValue);

          return '';
        });
      } else {
        var layerConfig = this.parent.getLayerConfig();

        if (!(style in layerConfig)) {
          return;
        }

        var config = layerConfig[style];
        updateValue = config;
        this.updateLayersConfig(this.children, style, config);

        if (style === 'rampColors' && config) {
          this.rampColorsData = (0, _l7Utils.generateColorRamp)(config);
        }
      }

      this.initOptions[style] = updateValue;
    }
  }, {
    key: "initTileFactory",
    value: function initTileFactory() {
      var source = this.parent.getSource();
      var TileFactory = (0, _tileFactory.getTileFactory)(this.parent.type, source.parser);
      this.tileFactory = new TileFactory({
        parent: this.parent,
        mapService: this.mapService,
        rendererService: this.rendererService
      });
    }
  }]);
  return TileLayerManager;
}();

exports.TileLayerManager = TileLayerManager;
//# sourceMappingURL=tileLayerManager.js.map
{"version":3,"sources":["../../src/plugins/FeatureScalePlugin.ts"],"names":["dateRegex","scaleMap","ScaleTypes","LINEAR","d3","scaleLinear","POWER","scalePow","LOG","scaleLog","IDENTITY","scaleIdentity","SEQUENTIAL","scaleSequential","TIME","scaleTime","QUANTILE","scaleQuantile","QUANTIZE","scaleQuantize","THRESHOLD","scaleThreshold","CAT","scaleOrdinal","DIVERGING","scaleDiverging","FeatureScalePlugin","TYPES","IGlobalConfigService","layer","styleAttributeService","hooks","init","tap","scaleOptions","getScaleOptions","attributes","getLayerStyleAttributes","dataArray","getSource","data","length","caculateScalesForAttributes","beforeRenderData","layerModelNeedUpdate","beforeRender","attributesToRescale","filter","attribute","needRescale","n","isNaN","parseFloat","isFinite","scaleCache","forEach","scale","attributeScale","type","name","names","parseFields","field","scales","push","createScale","values","some","StyleScaleType","VARIABLE","callback","option","tick","ticks","domain","range","interpolator","d3interpolate","interpolateRgbBasis","CONSTANT","defaultValues","map","index","scalers","func","Array","isArray","split","scaleOption","styleScale","undefined","createDefaultScale","firstValue","find","d","isNumber","getDefaultType","cfg","createScaleConfig","test","item","minMax","neutral","unknown","clamp","nice"],"mappings":"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","sourcesContent":["import {\n  IGlobalConfigService,\n  ILayer,\n  ILayerPlugin,\n  IScale,\n  IScaleOptions,\n  IStyleAttribute,\n  IStyleAttributeService,\n  IStyleScale,\n  ScaleTypeName,\n  ScaleTypes,\n  StyleScaleType,\n  TYPES,\n} from '@antv/l7-core';\nimport { IParseDataItem } from '@antv/l7-source';\nimport { extent, ticks } from 'd3-array';\nimport * as d3interpolate from 'd3-interpolate';\nimport * as d3 from 'd3-scale';\nimport { inject, injectable } from 'inversify';\nimport { isNil, isString, uniq } from 'lodash';\nimport 'reflect-metadata';\n\nconst dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n\nconst scaleMap = {\n  [ScaleTypes.LINEAR]: d3.scaleLinear,\n  [ScaleTypes.POWER]: d3.scalePow,\n  [ScaleTypes.LOG]: d3.scaleLog,\n  [ScaleTypes.IDENTITY]: d3.scaleIdentity,\n  [ScaleTypes.SEQUENTIAL]: d3.scaleSequential,\n  [ScaleTypes.TIME]: d3.scaleTime,\n  [ScaleTypes.QUANTILE]: d3.scaleQuantile,\n  [ScaleTypes.QUANTIZE]: d3.scaleQuantize,\n  [ScaleTypes.THRESHOLD]: d3.scaleThreshold,\n  [ScaleTypes.CAT]: d3.scaleOrdinal,\n  [ScaleTypes.DIVERGING]: d3.scaleDiverging,\n};\n\n/**\n * 根据 Source 原始数据为指定字段创建 Scale，保存在 StyleAttribute 上，供下游插件使用\n */\n@injectable()\nexport default class FeatureScalePlugin implements ILayerPlugin {\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n  // key = field_attribute name\n  private scaleCache: {\n    [field: string]: IStyleScale;\n  } = {};\n\n  private scaleOptions: IScaleOptions = {};\n\n  public apply(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    layer.hooks.init.tap('FeatureScalePlugin', () => {\n      this.scaleOptions = layer.getScaleOptions();\n      const attributes = styleAttributeService.getLayerStyleAttributes();\n      const { dataArray } = layer.getSource().data;\n      if (dataArray.length === 0) {\n        return;\n      }\n      this.caculateScalesForAttributes(attributes || [], dataArray);\n    });\n\n    // 检测数据是否需要更新\n    layer.hooks.beforeRenderData.tap('FeatureScalePlugin', () => {\n      this.scaleOptions = layer.getScaleOptions();\n      const attributes = styleAttributeService.getLayerStyleAttributes();\n      const { dataArray } = layer.getSource().data;\n      this.caculateScalesForAttributes(attributes || [], dataArray);\n      layer.layerModelNeedUpdate = true;\n      return true;\n    });\n\n    layer.hooks.beforeRender.tap('FeatureScalePlugin', () => {\n      if (layer.layerModelNeedUpdate) {\n        return;\n      }\n      this.scaleOptions = layer.getScaleOptions();\n      const attributes = styleAttributeService.getLayerStyleAttributes();\n      if (attributes) {\n        const { dataArray } = layer.getSource().data;\n        if (dataArray.length === 0) {\n          return;\n        }\n        const attributesToRescale = attributes.filter(\n          (attribute) => attribute.needRescale,\n        );\n        if (attributesToRescale.length) {\n          this.caculateScalesForAttributes(attributesToRescale, dataArray);\n        }\n      }\n    });\n  }\n  private isNumber(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  private caculateScalesForAttributes(\n    attributes: IStyleAttribute[],\n    dataArray: IParseDataItem[],\n  ) {\n    this.scaleCache = {};\n    attributes.forEach((attribute) => {\n      if (attribute.scale) {\n        // 创建Scale\n        const attributeScale = attribute.scale;\n        const type = attribute.name;\n        attributeScale.names = this.parseFields(attribute!.scale!.field || []);\n        const scales: IStyleScale[] = [];\n        // 为每个字段创建 Scale\n        attributeScale.names.forEach((field: string | number) => {\n          scales.push(\n            this.createScale(\n              field,\n              attribute.name,\n              attribute.scale?.values,\n              dataArray,\n            ),\n          );\n        });\n\n        // 为scales 设置值区间 Range\n        if (scales.some((scale) => scale.type === StyleScaleType.VARIABLE)) {\n          attributeScale.type = StyleScaleType.VARIABLE;\n          scales.forEach((scale) => {\n            // 如果设置了回调, 这不需要设置range\n            if (!attributeScale.callback && attributeScale.values !== 'text') {\n              switch (scale.option?.type) {\n                case ScaleTypes.LOG:\n                case ScaleTypes.LINEAR:\n                case ScaleTypes.POWER:\n                  if (\n                    attributeScale.values &&\n                    attributeScale.values.length > 2\n                  ) {\n                    const tick = scale.scale.ticks(\n                      attributeScale.values.length,\n                    );\n                    scale.scale.domain(tick);\n                  }\n                  attributeScale.values\n                    ? scale.scale.range(attributeScale.values)\n                    : scale.scale.range(scale.option.domain);\n                  break;\n                case ScaleTypes.QUANTILE:\n                case ScaleTypes.QUANTIZE:\n                case ScaleTypes.THRESHOLD:\n                  scale.scale.range(attributeScale.values); //\n                  break;\n                case ScaleTypes.CAT:\n                  attributeScale.values\n                    ? scale.scale.range(attributeScale.values)\n                    : scale.scale.range(scale.option.domain);\n                  break;\n                case ScaleTypes.DIVERGING:\n                case ScaleTypes.SEQUENTIAL:\n                  scale.scale.interpolator(\n                    // @ts-ignore\n                    d3interpolate.interpolateRgbBasis(attributeScale.values),\n                  );\n                  break;\n              }\n            }\n            if (attributeScale.values === 'text') {\n              scale.scale.range(scale.option?.domain);\n            }\n          });\n        } else {\n          // 设置attribute 常量值 常量直接在value取值\n          attributeScale.type = StyleScaleType.CONSTANT;\n          attributeScale.defaultValues = scales.map((scale, index) => {\n            return scale.scale(attributeScale.names[index]);\n          });\n        }\n        attributeScale.scalers = scales.map((scale: IStyleScale) => {\n          return {\n            field: scale.field,\n            func: scale.scale,\n            option: scale.option,\n          };\n        });\n\n        attribute.needRescale = false;\n      }\n    });\n  }\n\n  /**\n   * @example\n   * 'w*h' => ['w', 'h']\n   * 'w' => ['w']\n   */\n  private parseFields(\n    field: string[] | string | number[] | number,\n  ): string[] | number[] {\n    if (Array.isArray(field)) {\n      return field;\n    }\n    if (isString(field)) {\n      return field.split('*');\n    }\n    return [field];\n  }\n\n  private createScale(\n    field: string | number,\n    name: string,\n    values: unknown[] | string | undefined,\n    data?: IParseDataItem[],\n  ): IStyleScale {\n    // scale 支持根据视觉通道和字段\n    const scaleOption: IScale | undefined =\n      this.scaleOptions[name] && this.scaleOptions[name]?.field === field\n        ? this.scaleOptions[name] // TODO  zi\n        : this.scaleOptions[field];\n    const styleScale: IStyleScale = {\n      field,\n      scale: undefined,\n      type: StyleScaleType.VARIABLE,\n      option: scaleOption,\n    };\n\n    if (!data || !data.length) {\n      if (scaleOption && scaleOption.type) {\n        styleScale.scale = this.createDefaultScale(scaleOption);\n      } else {\n        styleScale.scale = d3.scaleOrdinal([field]);\n        styleScale.type = StyleScaleType.CONSTANT;\n      }\n      return styleScale;\n    }\n    const firstValue = data!.find((d) => !isNil(d[field]))?.[field];\n    // 常量 Scale\n    if (this.isNumber(field) || (isNil(firstValue) && !scaleOption)) {\n      styleScale.scale = d3.scaleOrdinal([field]);\n      styleScale.type = StyleScaleType.CONSTANT;\n    } else {\n      // 根据数据类型判断 默认等分位，时间，和枚举类型\n      let type =\n        (scaleOption && scaleOption.type) || this.getDefaultType(firstValue);\n      if (values === 'text') {\n        // text 为内置变 如果是文本则为cat\n        type = ScaleTypes.CAT;\n      }\n      const cfg = this.createScaleConfig(type, field, scaleOption, data);\n\n      styleScale.scale = this.createDefaultScale(cfg);\n      styleScale.option = cfg;\n    }\n    return styleScale;\n  }\n\n  private getDefaultType(firstValue: unknown) {\n    let type = ScaleTypes.LINEAR;\n    if (typeof firstValue === 'string') {\n      type = dateRegex.test(firstValue) ? ScaleTypes.TIME : ScaleTypes.CAT;\n    }\n    return type;\n  }\n  // 生成Scale 默认配置\n  private createScaleConfig(\n    type: ScaleTypeName,\n    field: string | number,\n    scaleOption: IScale | undefined,\n    data?: IParseDataItem[],\n  ) {\n    const cfg: IScale = {\n      type,\n    };\n    const values = data?.map((item) => item[field]) || [];\n    if (scaleOption?.domain) {\n      cfg.domain = scaleOption?.domain;\n    }\n    // 默认类型为 Quantile Scales https://github.com/d3/d3-scale#quantile-scales\n    else if (\n      type !== ScaleTypes.CAT &&\n      type !== ScaleTypes.QUANTILE &&\n      type !== ScaleTypes.DIVERGING\n    ) {\n      // linear/\n      cfg.domain = extent(values);\n    } else if (type === ScaleTypes.CAT) {\n      cfg.domain = uniq(values);\n    } else if (type === ScaleTypes.QUANTILE) {\n      cfg.domain = values;\n    } else if (type === ScaleTypes.DIVERGING) {\n      const minMax = extent(values);\n      const neutral =\n        scaleOption?.neutral !== undefined\n          ? scaleOption?.neutral\n          : (minMax[0] + minMax[1]) / 2;\n      cfg.domain = [minMax[0], neutral, minMax[1]];\n    }\n    return { ...cfg, ...scaleOption };\n  }\n\n  // 创建Scale 实例\n  private createDefaultScale({ type, domain, unknown, clamp, nice }: IScale) {\n    // @ts-ignore\n    const scale = scaleMap[type]();\n    if (domain && scale.domain) {\n      scale.domain(domain);\n    }\n    if (unknown) {\n      scale.unknown(unknown);\n    }\n    if (clamp !== undefined && scale.clamp) {\n      scale.clamp(clamp);\n    }\n    if (nice !== undefined && scale.nice) {\n      scale.nice(nice);\n    }\n    // TODO 其他属性支持\n    return scale;\n  }\n}\n"],"file":"FeatureScalePlugin.js"}
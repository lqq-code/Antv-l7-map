{"version":3,"sources":["../../../src/polygon/models/tile.ts"],"names":["FillModel","layer","getLayerConfig","opacity","tileOrigin","coord","dataTextureTest","dataTextureNeedUpdate","judgeStyleAttributes","encodeData","getEncodedData","calDataFrame","cellLength","cellProperties","data","width","height","rowCount","dataTexture","length","createTexture2D","flipY","format","gl","LUMINANCE","type","FLOAT","u_tileOrigin","u_coord","u_dataTexture","u_cellTypeLayout","getCellTypeLayout","u_opacity","buildModels","getModelParams","frag","vert","triangulation","mask","maskInside","buildLayerModel","moduleName","vertexShader","fragmentShader","blend","getBlend","depth","enable","stencil","destroy","polygon_tile_frag","polygon_tile_vert","polygonTriangulation","BaseModel"],"mappings":"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","sourcesContent":["import { gl, IModel, Triangulation } from '@antv/l7-core';\nimport { getMask } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { IPolygonLayerStyleOptions } from '../../core/interface';\nimport { polygonTriangulation } from '../../core/triangulation';\n\nimport polygon_tile_frag from '../shaders/tile/polygon_tile_frag.glsl';\nimport polygon_tile_vert from '../shaders/tile/polygon_tile_vert.glsl';\nexport default class FillModel extends BaseModel {\n  public getUninforms() {\n    const {\n      opacity = 1,\n      tileOrigin,\n      coord = 'lnglat',\n    } = this.layer.getLayerConfig() as IPolygonLayerStyleOptions;\n    if (this.dataTextureTest && this.dataTextureNeedUpdate({ opacity })) {\n      this.judgeStyleAttributes({ opacity });\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_tileOrigin: tileOrigin || [0, 0],\n      u_coord: coord === 'lnglat' ? 1.0 : 0.0,\n\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n\n      u_opacity: opacity,\n    };\n  }\n\n  public initModels(): IModel[] {\n    return this.buildModels();\n  }\n\n  public buildModels(): IModel[] {\n    const { frag, vert, triangulation, type } = this.getModelParams();\n    const {\n      mask = false,\n      maskInside = true,\n    } = this.layer.getLayerConfig() as IPolygonLayerStyleOptions;\n    this.layer.triangulation = triangulation;\n    return [\n      this.layer.buildLayerModel({\n        moduleName: type,\n        vertexShader: vert,\n        fragmentShader: frag,\n        triangulation,\n        blend: this.getBlend(),\n        depth: { enable: false },\n        stencil: getMask(mask, maskInside),\n      }),\n    ];\n  }\n\n  public clearModels() {\n    this.dataTexture?.destroy();\n  }\n\n  protected registerBuiltinAttributes() {\n    //\n  }\n\n  private getModelParams(): {\n    frag: string;\n    vert: string;\n    type: string;\n    triangulation: Triangulation;\n  } {\n    return {\n      frag: polygon_tile_frag,\n      vert: polygon_tile_vert,\n      type: 'polygon_tile',\n      triangulation: polygonTriangulation,\n    };\n  }\n}\n"],"file":"tile.js"}
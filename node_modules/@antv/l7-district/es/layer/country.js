function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import { LineLayer, PointLayer } from '@antv/l7';
import { getDataConfig } from '../config';
import BaseLayer from './baseLayer';
import { RegionList } from '../const';

var CountryLayer = /*#__PURE__*/function (_BaseLayer) {
  _inherits(CountryLayer, _BaseLayer);

  var _super = _createSuper(CountryLayer);

  function CountryLayer(scene) {
    var _this;

    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, CountryLayer);

    _this = _super.call(this, scene, option);
    _this.layerType = 'Country';
    _this.fillRawData = void 0;

    _this.init();

    return _this;
  }

  _createClass(CountryLayer, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this$options, depth, showBorder, countryConfig;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$options = this.options, depth = _this$options.depth, showBorder = _this$options.showBorder;
                _context.next = 3;
                return this.addProvinceFill();

              case 3:
                _context.next = 5;
                return this.addProvinceLabel();

              case 5:
                countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[depth];

                if (!showBorder) {
                  _context.next = 15;
                  break;
                }

                _context.next = 9;
                return this.addProvinceLine(countryConfig.provinceLine);

              case 9:
                if (!(depth === 2 * 1)) {
                  _context.next = 12;
                  break;
                }

                _context.next = 12;
                return this.addCityBorder(countryConfig.fill);

              case 12:
                if (!(depth === 3 * 1)) {
                  _context.next = 15;
                  break;
                }

                _context.next = 15;
                return this.addCountyBorder(countryConfig.fill);

              case 15:
                this.emit('loaded');
                this.loaded = true;

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "addProvinceFill",
    value: function () {
      var _addProvinceFill = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var _this$options2, depth, adcode, countryConfig, fillData, data;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this$options2 = this.options, depth = _this$options2.depth, adcode = _this$options2.adcode; // 根据depth 获取数据

                countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[depth];
                _context2.next = 4;
                return this.fetchData(countryConfig.fill);

              case 4:
                fillData = _context2.sent;
                this.fillRawData = fillData;
                data = fillData;

                if (adcode && Array.isArray(adcode) && adcode.length !== 0) {
                  data = this.filterData(fillData, adcode);
                }

                this.fillData = data;
                this.addFillLayer(data);

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function addProvinceFill() {
        return _addProvinceFill.apply(this, arguments);
      }

      return addProvinceFill;
    }()
  }, {
    key: "addProvinceLabel",
    value: function () {
      var _addProvinceLabel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var _this$options$label;

        var depth, countryConfig, fillLabel, viewType;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                depth = this.options.depth;
                countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[depth];

                if (!countryConfig.label) {
                  _context3.next = 8;
                  break;
                }

                _context3.next = 5;
                return this.fetchData(countryConfig.label);

              case 5:
                _context3.t0 = _context3.sent;
                _context3.next = 9;
                break;

              case 8:
                _context3.t0 = null;

              case 9:
                fillLabel = _context3.t0;

                if (fillLabel && ((_this$options$label = this.options.label) === null || _this$options$label === void 0 ? void 0 : _this$options$label.enable)) {
                  viewType = this.getOptions().viewType;

                  if (viewType === 'standard') {
                    this.addLabelLayer(fillLabel.filter(function (v) {
                      return v.name !== '澳门';
                    }));
                    this.addMCLabel();
                  } else {
                    this.addLabelLayer(fillLabel);
                  }
                }

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function addProvinceLabel() {
        return _addProvinceLabel.apply(this, arguments);
      }

      return addProvinceLabel;
    }() // 国界,省界 完整国界

  }, {
    key: "addProvinceLine",
    value: function () {
      var _addProvinceLine = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(cfg) {
        var lineData, border1, border2, borderFc, borderFc2, nationalBorder, nationalFc;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.fetchData(cfg);

              case 2:
                lineData = _context4.sent;
                // 普通国界
                border1 = lineData.features.filter(function (feature) {
                  var type = feature.properties.type;
                  return type === '1';
                }); // 香港 澳门

                border2 = lineData.features.filter(function (feature) {
                  var type = feature.properties.type;
                  return type === '4';
                });
                borderFc = {
                  type: 'FeatureCollection',
                  features: border1
                };
                borderFc2 = {
                  type: 'FeatureCollection',
                  features: border2
                };
                nationalBorder = lineData.features.filter(function (feature) {
                  var type = feature.properties.type;
                  return type !== '1' && type !== '4';
                });
                nationalFc = {
                  type: 'FeatureCollection',
                  features: nationalBorder
                };
                this.addNationBorder(nationalFc, borderFc, borderFc2);

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function addProvinceLine(_x) {
        return _addProvinceLine.apply(this, arguments);
      }

      return addProvinceLine;
    }() // 普通边界

  }, {
    key: "addNormalProvinceLine",
    value: function () {
      var _addNormalProvinceLine = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(cfg) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function addNormalProvinceLine(_x2) {
        return _addNormalProvinceLine.apply(this, arguments);
      }

      return addNormalProvinceLine;
    }() // 省级行政区划

  }, {
    key: "addNationBorder",
    value: function () {
      var _addNationBorder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(boundaries, boundaries2, boundaries3) {
        var _this$options3, nationalStroke, provinceStroke, provinceStrokeWidth, nationalWidth, chinaNationalStroke, chinaNationalWidth, coastlineStroke, coastlineWidth, showBorder, stroke, strokeWidth, visible, zIndex, strokeOpacity, lineLayer, lineLayer2, lineLayer3;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _this$options3 = this.options, nationalStroke = _this$options3.nationalStroke, provinceStroke = _this$options3.provinceStroke, provinceStrokeWidth = _this$options3.provinceStrokeWidth, nationalWidth = _this$options3.nationalWidth, chinaNationalStroke = _this$options3.chinaNationalStroke, chinaNationalWidth = _this$options3.chinaNationalWidth, coastlineStroke = _this$options3.coastlineStroke, coastlineWidth = _this$options3.coastlineWidth, showBorder = _this$options3.showBorder, stroke = _this$options3.stroke, strokeWidth = _this$options3.strokeWidth, visible = _this$options3.visible, zIndex = _this$options3.zIndex, strokeOpacity = _this$options3.strokeOpacity; // 添加国界线

                lineLayer = new LineLayer({
                  zIndex: zIndex + 0.1,
                  visible: visible && showBorder
                }).source(boundaries).size('type', function (v) {
                  if (v === '3') {
                    return provinceStrokeWidth;
                  } else if (v === '2') {
                    return coastlineWidth;
                  } else if (v === '0') {
                    return chinaNationalWidth;
                  } else {
                    return '#fff';
                  }
                }).shape('line').color('type', function (v) {
                  if (v === '3') {
                    return provinceStroke; // 省界
                  } else if (v === '2') {
                    return coastlineStroke; // 海岸线
                  } else if (v === '0') {
                    return chinaNationalStroke; // 中国国界线
                  } else {
                    return '#fff';
                  }
                }); // 添加未定国界

                lineLayer2 = new LineLayer({
                  zIndex: zIndex + 0.1,
                  visible: visible && showBorder
                }).source(boundaries2).size(chinaNationalWidth).shape('line').color(chinaNationalStroke).style({
                  lineType: 'dash',
                  dashArray: [2, 2]
                }); // 添加澳门香港界限

                lineLayer3 = new LineLayer({
                  zIndex: zIndex + 0.1,
                  visible: visible && showBorder
                }).source(boundaries3).size(provinceStrokeWidth).shape('line').color(provinceStroke).style({
                  lineType: 'dash',
                  dashArray: [4, 2, 2, 2]
                });
                this.scene.addLayer(lineLayer);
                this.scene.addLayer(lineLayer2);
                this.scene.addLayer(lineLayer3);
                this.layers.push(lineLayer, lineLayer2, lineLayer3);

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function addNationBorder(_x3, _x4, _x5) {
        return _addNationBorder.apply(this, arguments);
      }

      return addNationBorder;
    }() // 市边界

  }, {
    key: "addCityBorder",
    value: function () {
      var _addCityBorder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(cfg) {
        var border1, _this$options4, cityStroke, cityStrokeWidth, visible, strokeOpacity, cityline;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.fetchData(cfg);

              case 2:
                border1 = _context7.sent;
                _this$options4 = this.options, cityStroke = _this$options4.cityStroke, cityStrokeWidth = _this$options4.cityStrokeWidth, visible = _this$options4.visible, strokeOpacity = _this$options4.strokeOpacity;
                cityline = new LineLayer({
                  zIndex: 2,
                  visible: visible
                }).source(border1).color(cityStroke).size(cityStrokeWidth).style({
                  opacity: strokeOpacity
                });
                this.scene.addLayer(cityline);
                this.layers.push(cityline);

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function addCityBorder(_x6) {
        return _addCityBorder.apply(this, arguments);
      }

      return addCityBorder;
    }() // 县级边界

  }, {
    key: "addCountyBorder",
    value: function () {
      var _addCountyBorder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(cfg) {
        var border1, _this$options5, countyStrokeWidth, countyStroke, visible, strokeOpacity, cityline;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.fetchData(cfg);

              case 2:
                border1 = _context8.sent;
                _this$options5 = this.options, countyStrokeWidth = _this$options5.countyStrokeWidth, countyStroke = _this$options5.countyStroke, visible = _this$options5.visible, strokeOpacity = _this$options5.strokeOpacity;
                cityline = new LineLayer({
                  zIndex: 2,
                  visible: visible
                }).source(border1).color(countyStroke).size(countyStrokeWidth).style({
                  opacity: strokeOpacity
                });
                this.scene.addLayer(cityline);
                this.layers.push(cityline);

              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function addCountyBorder(_x7) {
        return _addCountyBorder.apply(this, arguments);
      }

      return addCountyBorder;
    }()
  }, {
    key: "addMCLabel",
    value: function addMCLabel() {
      var data = [{
        name: '澳门',
        center: [113.537747, 22.187009]
      }];
      var labelLayer1 = this.addText(data, {
        maxZoom: 2.9
      }, [-45, -10]);
      var labelLayer2 = this.addText(data, {
        minZoom: 3,
        maxZoom: 4
      }, [-35, -10]);
      var labelLayer = this.addText(data, {
        minZoom: 4.1
      }, [0, 0]);
      this.scene.addLayer(labelLayer);
      this.scene.addLayer(labelLayer1);
      this.scene.addLayer(labelLayer2);
      this.layers.push(labelLayer, labelLayer1, labelLayer2);
    }
  }, {
    key: "filterData",
    value: function filterData(data, adcode) {
      var adcodeArray = Array.isArray(adcode) ? adcode : [adcode];
      var features = data.features.filter(function (fe) {
        // 根据Code过滤数据
        var _fe$properties = fe.properties,
            REGION_CODE = _fe$properties.REGION_CODE,
            adcode_pro = _fe$properties.adcode_pro;
        return adcodeArray.indexOf('86') !== -1 || adcodeArray.indexOf(86) !== -1 || adcodeArray.indexOf(REGION_CODE) !== -1 || adcodeArray.indexOf('' + REGION_CODE) !== -1 || adcodeArray.indexOf(adcode_pro) !== -1 || adcodeArray.indexOf('' + adcode_pro) !== -1;
      });
      return {
        type: 'FeatureCollection',
        features: features
      };
    }
  }, {
    key: "addText",
    value: function addText(labelData, option, offset) {
      var _this$options6 = this.options,
          label = _this$options6.label,
          zIndex = _this$options6.zIndex,
          visible = _this$options6.visible;
      var labelLayer = new PointLayer(_objectSpread({
        zIndex: zIndex + 0.4,
        visible: visible
      }, option)).source(labelData, {
        parser: {
          type: 'json',
          coordinates: 'center'
        }
      }).color(label.color).shape('name', 'text').size(label.size).style({
        opacity: label.opacity,
        stroke: label.stroke,
        strokeWidth: label.strokeWidth,
        textAllowOverlap: label.textAllowOverlap,
        textOffset: offset
      });
      return labelLayer;
    }
  }, {
    key: "addRegionLabel",
    value: function addRegionLabel() {
      var data = Object.values(RegionList).map(function (v) {
        return v;
      }); // console.log('data', data);
      // this.addLabelLayer(data);
    }
  }]);

  return CountryLayer;
}(BaseLayer);

export { CountryLayer as default };
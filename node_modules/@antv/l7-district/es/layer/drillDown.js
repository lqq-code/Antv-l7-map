function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// tslint:disable-next-line: no-submodule-imports
import mergeWith from 'lodash/mergeWith';
import CityLayer from './city';
import CountryLayer from './country';
import RegionLayer from './region';
import ProvinceLayer from './province';
import { RegionList, DRILL_TYPE_LIST } from '../const';

function mergeCustomizer(objValue, srcValue) {
  if (Array.isArray(srcValue)) {
    return srcValue;
  }
}

var DrillDownLayer = /*#__PURE__*/function () {
  function DrillDownLayer(scene, option) {
    _classCallCheck(this, DrillDownLayer);

    this.drillState = void 0;
    this.options = void 0;
    this.regionLayer = void 0;
    this.cityLayer = void 0;
    this.countyLayer = void 0;
    this.provinceLayer = void 0;
    this.scene = void 0;
    this.layers = [];
    this.drillList = void 0;
    this.options = mergeWith(this.getDefaultOption(), option, mergeCustomizer);
    this.drillState = this.options.viewStart;
    this.scene = scene;
    this.drillList = this.getViewList(); // 初始化各层级图层；

    this.initLayers(scene);
    this.initLayerEvent();
    this.scene.setMapStatus({
      doubleClickZoom: false
    });
  }

  _createClass(DrillDownLayer, [{
    key: "getDefaultOption",
    value: function getDefaultOption() {
      return {
        drillDepth: 2,
        drillStart: 1,
        customTrigger: false,
        autoUpdateData: true,
        regionDrill: false,
        drillDownTriggerEvent: 'click',
        drillUpTriggerEvent: 'undblclick',
        provinceData: [],
        viewStart: 'Country',
        viewEnd: 'County',
        cityData: [],
        countyData: [],
        city: {
          adcode: [],
          depth: 2
        },
        region: {
          adcode: [],
          depth: 1
        },
        county: {
          adcode: []
        }
      };
    } // 国家视角 下钻

  }, {
    key: "addCountryEvent",
    value: function addCountryEvent() {
      var _this = this;

      var _this$options = this.options,
          drillDownTriggerEvent = _this$options.drillDownTriggerEvent,
          drillDownEvent = _this$options.drillDownEvent; // 省级下钻到市

      this.provinceLayer.fillLayer.on(drillDownTriggerEvent, function (e) {
        var adcode = e.feature.properties.adcode;
        var type = 'Province';
        _this.drillState = 'Province';

        if (_this.options.regionDrill) {
          var REGION_CODE = e.feature.properties.REGION_CODE;
          adcode = RegionList[REGION_CODE].child; // 下钻到省级

          _this.drillState = 'Region';
          type = 'Region';
        } // 下钻到省份


        if (_this.options.autoUpdateData) {
          _this.drillDown(adcode);
        } // 下钻事件


        if (_this.drillList.indexOf(type) !== -1) {
          _this.provinceLayer.hide();

          drillDownEvent && drillDownEvent(e.feature.properties, type, adcode);
        }
      });
    } // 大区下钻

  }, {
    key: "addRegionEvent",
    value: function addRegionEvent() {
      var _this2 = this;

      var _this$options2 = this.options,
          drillDownTriggerEvent = _this$options2.drillDownTriggerEvent,
          drillUpTriggerEvent = _this$options2.drillUpTriggerEvent,
          drillUpEvent = _this$options2.drillUpEvent,
          drillDownEvent = _this$options2.drillDownEvent;
      this.regionLayer.fillLayer.on(drillUpTriggerEvent, function (e) {
        // const properties = this.getProperties(
        //   this.regionLayer.getFillData(),
        //   this.regionLayer.getOptions().adcode,
        // );
        _this2.drillUp('Country');

        if (_this2.drillList.indexOf('Country') !== -1) drillUpEvent && drillUpEvent({
          from: 'region',
          to: 'country'
        });
      });
      this.regionLayer.fillLayer.on(drillDownTriggerEvent, function (e) {
        _this2.drillState = 'Province';

        if (_this2.options.autoUpdateData) {
          _this2.drillDown(e.feature.properties.adcode);
        } // 是否下钻


        if (_this2.drillList.indexOf('Province') !== -1) {
          _this2.regionLayer.hide();

          drillDownEvent && drillDownEvent(e.feature.properties, 'Province', e.feature.properties.adcode);
        }
      });
    } // 省份视角下钻

  }, {
    key: "addProvinceEvent",
    value: function addProvinceEvent() {
      var _this3 = this;

      var _this$options3 = this.options,
          drillDownTriggerEvent = _this$options3.drillDownTriggerEvent,
          drillUpTriggerEvent = _this$options3.drillUpTriggerEvent,
          drillUpEvent = _this$options3.drillUpEvent,
          drillDownEvent = _this$options3.drillDownEvent;
      this.cityLayer.fillLayer.on(drillUpTriggerEvent, function () {
        // const properties = this.getProperties(
        //   this.provinceLayer.getFillData(),
        //   this.cityLayer.getOptions().adcode,
        // );
        _this3.drillState = 'Province';
        var next = _this3.options.regionDrill ? 'Region' : 'Country';

        _this3.drillUp(next);

        if (_this3.drillList.indexOf(next) !== -1) drillUpEvent && drillUpEvent({
          to: next,
          from: 'Province'
        });
      });
      this.cityLayer.fillLayer.on(drillDownTriggerEvent, function (e) {
        _this3.drillState = 'City';

        if (_this3.options.autoUpdateData) {
          _this3.drillDown(e.feature.properties.adcode);
        }

        if (_this3.drillList.indexOf('City') !== -1) {
          drillDownEvent && drillDownEvent(e.feature.properties, 'City', e.feature.properties.adcode);
        }
      });
    } // 添加县级行政区划

  }, {
    key: "addCityEvent",
    value: function addCityEvent() {
      var _this4 = this;

      var _this$options4 = this.options,
          drillDownTriggerEvent = _this$options4.drillDownTriggerEvent,
          drillUpTriggerEvent = _this$options4.drillUpTriggerEvent,
          drillUpEvent = _this$options4.drillUpEvent;
      this.countyLayer.fillLayer.on(drillUpTriggerEvent, function () {
        // const properties = this.getProperties(
        //   this.cityLayer.getFillData(),
        //   this.countyLayer.getOptions().adcode,
        // );
        _this4.drillUp('Province');

        if (_this4.drillList.indexOf('Province') !== -1) drillUpEvent && drillUpEvent({
          to: 'Province',
          from: 'city'
        });
      });
    }
  }, {
    key: "show",
    value: function show() {
      this.layers.forEach(function (layer) {
        return layer.show();
      });
    }
  }, {
    key: "hide",
    value: function hide() {
      this.layers.forEach(function (layer) {
        return layer.hide();
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.layers.forEach(function (layer) {
        return layer.destroy();
      });
    } // 省份视图 城市粒度

  }, {
    key: "showProvinceView",
    value: function showProvinceView(adcode, newData, joinByField) {
      this.cityLayer.show();
      this.cityLayer.updateDistrict(adcode, newData, joinByField);
      this.cityLayer.fillLayer.fitBounds();

      if (this.options.regionDrill) {
        this.regionLayer.hide();
      } else {
        this.provinceLayer.hide();
      }

      this.drillState = 'Province';
    } // 城市视图 区县粒度

  }, {
    key: "showCityView",
    value: function showCityView(code, newData, joinByField) {
      this.countyLayer.show();
      var adcode = "".concat(code);

      if (adcode.substr(0, 4) === '5000') {
        // 重庆包含两个编码
        adcode = [adcode.substr(0, 2) + '0100', adcode.substr(0, 2) + '0200'];
      } else if (adcode.substr(2, 2) === '00' && adcode !== '810000' && adcode !== '820000') {
        adcode = [adcode.substr(0, 2) + '0100'];
      } // 更新县级行政区划


      this.countyLayer.updateDistrict(adcode, newData, joinByField);
      this.countyLayer.fillLayer.fitBounds();
      this.cityLayer.hide();
      this.drillState = 'City';
    } // 大区视图 省份视角

  }, {
    key: "showRegionView",
    value: function showRegionView(adcode, newData, joinByField) {
      this.regionLayer.show();
      this.regionLayer.updateDistrict(adcode, newData, joinByField);
      this.regionLayer.fillLayer.fitBounds();
      this.provinceLayer.hide();
      this.drillState = 'Region';
    }
    /**
     * 向上
     */

  }, {
    key: "drillUp",
    value: function drillUp(type) {
      if (this.drillList.indexOf(type) === -1) {
        return;
      }

      switch (type) {
        case 'Province':
          this.cityLayer.show();
          this.cityLayer.fillLayer.fitBounds();
          this.countyLayer.hide();
          this.drillState = 'Province';
          break;

        case 'Country':
          this.provinceLayer.show();
          this.provinceLayer.fillLayer.fitBounds();

          if (this.options.regionDrill) {
            this.regionLayer.hide();
          } else {
            this.cityLayer.hide();
          }

          this.drillState = 'Country';
          break;

        case 'Region':
          if (this.options.regionDrill) {
            this.regionLayer.show();
            this.regionLayer.fillLayer.fitBounds();
            this.cityLayer.hide();
            this.drillState = 'Region';
          }

          break;
      }
    }
  }, {
    key: "drillDown",
    value: function drillDown(adcode, newData, joinByField) {
      if (this.drillList.indexOf(this.drillState) === -1) {
        return;
      }

      switch (this.drillState) {
        case 'Province':
          this.showProvinceView(adcode, newData, joinByField); // 市

          break;

        case 'Region':
          this.showRegionView(adcode, newData, joinByField); // 省

          break;

        case 'City':
          this.showCityView(adcode, newData, joinByField); // 区县

          break;
      }
    }
  }, {
    key: "updateData",
    value: function updateData(layer, newData, joinByField) {
      switch (layer) {
        case 'Country':
        case 'province':
          this.provinceLayer.updateData(newData, joinByField);
          break;

        case 'Region':
        case 'region':
          this.regionLayer.updateData(newData, joinByField);
          break;

        case 'Province':
        case 'city':
          this.cityLayer.updateData(newData, joinByField);
          break;

        case 'City':
        case 'county':
          this.countyLayer.updateData(newData, joinByField);
      }
    }
  }, {
    key: "getLayerOption",
    value: function getLayerOption(type) {
      var _this$options5 = this.options,
          joinBy = _this$options5.joinBy,
          label = _this$options5.label,
          bubble = _this$options5.bubble,
          fill = _this$options5.fill,
          popup = _this$options5.popup,
          geoDataLevel = _this$options5.geoDataLevel,
          onClick = _this$options5.onClick;
      var datatype = type.toLowerCase() + 'Data';
      return _objectSpread({
        data: this.options[datatype],
        joinBy: joinBy,
        label: label,
        bubble: bubble,
        fill: fill,
        popup: popup,
        onClick: onClick,
        geoDataLevel: geoDataLevel
      }, this.options[type.toLowerCase()]);
    }
  }, {
    key: "initLayers",
    value: function initLayers(scene) {
      var viewList = this.getViewList();
      viewList.indexOf('Country') !== -1 && (this.provinceLayer = new CountryLayer(scene, _objectSpread({}, this.getLayerOption('Province'))));
      viewList.indexOf('Region') !== -1 && (this.regionLayer = new RegionLayer(scene, this.getLayerOption('Region')));
      viewList.indexOf('Province') !== -1 && (this.cityLayer = new ProvinceLayer(scene, this.getLayerOption('City')));
      viewList.indexOf('City') !== -1 && (this.countyLayer = new CityLayer(scene, this.getLayerOption('County')));
    }
  }, {
    key: "initLayerEvent",
    value: function initLayerEvent() {
      var _this5 = this;

      var viewList = this.getViewList();

      if (!this.options.customTrigger) {
        viewList.indexOf('Country') !== -1 && this.provinceLayer.on('loaded', function () {
          // 支持大区 或者省份下钻
          _this5.addCountryEvent();

          if (_this5.options.viewStart !== 'Country') _this5.provinceLayer.hide();

          _this5.layers.push(_this5.provinceLayer);
        });
        viewList.indexOf('Region') !== -1 && this.regionLayer.on('loaded', function () {
          // 支持大区 或者省份下钻
          _this5.addRegionEvent();

          if (_this5.options.viewStart !== 'Region') _this5.regionLayer.hide();

          _this5.layers.push(_this5.regionLayer);
        });
        viewList.indexOf('Province') !== -1 && this.cityLayer.on('loaded', function () {
          _this5.addProvinceEvent();

          if (_this5.options.viewStart !== 'Province') _this5.cityLayer.hide();

          _this5.layers.push(_this5.cityLayer);
        });
        viewList.indexOf('City') !== -1 && this.countyLayer.on('loaded', function () {
          _this5.addCityEvent();

          if (_this5.options.viewStart !== 'City') _this5.countyLayer.hide();

          _this5.layers.push(_this5.countyLayer);
        });
      }
    }
  }, {
    key: "getViewList",
    value: function getViewList() {
      var _this$options6 = this.options,
          viewStart = _this$options6.viewStart,
          viewEnd = _this$options6.viewEnd;
      var drillList = DRILL_TYPE_LIST;

      if (!this.options.regionDrill && drillList.indexOf('Region') !== -1) {
        drillList.splice(1, 1);
      }

      var start = drillList.indexOf(viewStart);
      var end = drillList.indexOf(viewEnd);

      if (start === -1 || end === -1 || end < start) {
        throw new Error('下钻 viewStart, viewEnd 参数错误');
      }

      return drillList.slice(start, end + 1);
    }
  }, {
    key: "getProperties",
    value: function getProperties(data, adcode) {
      var adcodeArray = Array.isArray(adcode) ? adcode : [adcode];
      var feature = data.features.filter(function (fe) {
        var code = fe.properties.adcode;
        return adcodeArray.indexOf(code) !== -1 || adcodeArray.indexOf('' + code) !== -1;
      });
      return feature[0] ? feature[0].properties : {};
    }
  }, {
    key: "enablePopup",
    value: function enablePopup() {
      if (this.cityLayer) {
        this.cityLayer.enablePopup();
      }

      if (this.countyLayer) {
        this.countyLayer.enablePopup();
      }

      if (this.provinceLayer) {
        this.provinceLayer.enablePopup();
      }

      if (this.regionLayer) {
        this.regionLayer.enablePopup();
      }
    }
  }, {
    key: "disablePopup",
    value: function disablePopup() {
      if (this.cityLayer) {
        this.cityLayer.disablePopup();
      }

      if (this.countyLayer) {
        this.countyLayer.disablePopup();
      }

      if (this.provinceLayer) {
        this.provinceLayer.disablePopup();
      }

      if (this.regionLayer) {
        this.regionLayer.disablePopup();
      }
    }
  }]);

  return DrillDownLayer;
}();

export { DrillDownLayer as default };
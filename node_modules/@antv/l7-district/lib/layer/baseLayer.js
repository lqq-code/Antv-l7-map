"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _l = require("@antv/l7");

var _eventemitter = require("eventemitter3");

var _geobuf = _interopRequireDefault(require("geobuf"));

var _isObject = _interopRequireDefault(require("lodash/isObject"));

var _mergeWith = _interopRequireDefault(require("lodash/mergeWith"));

var _pbf = _interopRequireDefault(require("pbf"));

var _simplifyGeojson = _interopRequireDefault(require("simplify-geojson"));

var _config = require("../config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var eventList = ['loaded'];

function mergeCustomizer(objValue, srcValue) {
  if (Array.isArray(srcValue)) {
    return srcValue;
  }
}

var BaseLayer = /*#__PURE__*/function (_EventEmitter) {
  _inherits(BaseLayer, _EventEmitter);

  var _super = _createSuper(BaseLayer);

  function BaseLayer(scene) {
    var _this;

    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, BaseLayer);

    _this = _super.call(this);
    _this.fillLayer = void 0;
    _this.lineLayer = void 0;
    _this.labelLayer = void 0;
    _this.bubbleLayer = void 0;
    _this.loaded = false;
    _this.scene = void 0;
    _this.options = void 0;
    _this.layers = [];
    _this.fillData = void 0;
    _this.layerType = void 0;
    _this.popup = void 0;
    _this.scene = scene;
    _this.options = (0, _mergeWith.default)(_this.getDefaultOption(), option, mergeCustomizer);
    (0, _config.setDataLevel)(_this.options.geoDataLevel);
    return _this;
  }

  _createClass(BaseLayer, [{
    key: "destroy",
    value: function destroy() {
      var _this2 = this;

      this.layers.forEach(function (layer) {
        return _this2.scene.removeLayer(layer);
      });
      this.layers.length = 0;
    }
  }, {
    key: "show",
    value: function show() {
      this.layers.forEach(function (layer) {
        return layer.show();
      });
    }
  }, {
    key: "hide",
    value: function hide() {
      this.layers.forEach(function (layer) {
        return layer.hide();
      });
    }
  }, {
    key: "setOption",
    value: function setOption(newOption) {
      this.options = (0, _mergeWith.default)(this.options, newOption, mergeCustomizer);
    }
  }, {
    key: "getFillData",
    value: function getFillData() {
      return this.fillData;
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.options;
    }
  }, {
    key: "getLayer",
    value: function getLayer(type) {
      // @ts-ignore
      return this[type + 'Layer'];
    }
  }, {
    key: "on",
    value: function on(event, handle) {
      var _this3 = this;

      var layerType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'fill';

      if (eventList.indexOf(event) !== -1) {
        _get(_getPrototypeOf(BaseLayer.prototype), "on", this).call(this, event, handle);
      } else {
        if (this.loaded && this.getLayer(layerType)) {
          this.getLayer(layerType).on(event, handle);
        } else {
          _get(_getPrototypeOf(BaseLayer.prototype), "once", this).call(this, 'loaded', function () {
            _this3.getLayer(layerType).on(event, handle);
          });
        }
      }

      return this;
    }
  }, {
    key: "off",
    value: function off(event, handle) {
      var _this4 = this;

      var layerType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'fill';

      if (eventList.indexOf(event) !== -1) {
        _get(_getPrototypeOf(BaseLayer.prototype), "on", this).call(this, event, handle);
      } else if (this.getLayer(layerType)) {
        if (this.loaded && this.getLayer(layerType)) {
          this.getLayer(layerType).off(event, handle);
        } else {
          _get(_getPrototypeOf(BaseLayer.prototype), "once", this).call(this, 'loaded', function () {
            _this4.getLayer(layerType).off(event, handle);
          });
        }
      }

      return this;
    }
  }, {
    key: "updateData",
    value: function updateData(newData, joinByField) {
      var _this$options$bubble;

      this.setOption({
        data: newData,
        joinBy: joinByField
      });
      var _this$options = this.options,
          _this$options$data = _this$options.data,
          data = _this$options$data === void 0 ? [] : _this$options$data,
          joinBy = _this$options.joinBy;
      this.fillLayer.setData(this.fillData, {
        transforms: data.length === 0 ? [] : [{
          type: 'join',
          sourceField: joinBy[1],
          targetField: joinBy[0],
          data: data
        }]
      });

      if (this.options.bubble && ((_this$options$bubble = this.options.bubble) === null || _this$options$bubble === void 0 ? void 0 : _this$options$bubble.enable) !== false) {
        // TODO 临时处理如果数据为join
        var dataMap = {};
        data.forEach(function (item) {
          dataMap[item[joinBy[1]]] = item;
        });
        var bubbleData = this.fillData.features.map(function (feature) {
          return _objectSpread(_objectSpread({}, feature.properties), {}, {
            center: [feature.properties.x, feature.properties.y]
          });
        }).filter(function (feature) {
          return dataMap[feature[joinBy[0]]];
        });
        this.bubbleLayer.setData(bubbleData, {
          transforms: data.length === 0 ? [] : [{
            type: 'join',
            sourceField: joinBy[1],
            targetField: joinBy[0],
            data: data
          }]
        });
      }
    }
  }, {
    key: "fetchData",
    value: function () {
      var _fetchData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
        var buffer, geojson;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(data.type === 'pbf')) {
                  _context.next = 11;
                  break;
                }

                _context.next = 3;
                return fetch(data.url);

              case 3:
                _context.next = 5;
                return _context.sent.arrayBuffer();

              case 5:
                buffer = _context.sent;
                geojson = _geobuf.default.decode(new _pbf.default(buffer));

                if (this.options.simplifyTolerance !== false) {
                  geojson = (0, _simplifyGeojson.default)(geojson, this.options.simplifyTolerance || 0.8);
                }

                return _context.abrupt("return", geojson);

              case 11:
                if (!(0, _isObject.default)(data.url)) {
                  _context.next = 15;
                  break;
                }

                _context.t0 = data.url;
                _context.next = 18;
                break;

              case 15:
                _context.next = 17;
                return fetch(data.url);

              case 17:
                _context.t0 = _context.sent.json();

              case 18:
                return _context.abrupt("return", _context.t0);

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function fetchData(_x) {
        return _fetchData.apply(this, arguments);
      }

      return fetchData;
    }()
  }, {
    key: "getDefaultOption",
    value: function getDefaultOption() {
      return {
        zIndex: 0,
        visible: true,
        viewType: 'normal',
        enablePropagation: true,
        geoDataLevel: 2,
        regionType: 'province',
        depth: 1,
        adcode: [],
        joinBy: ['name', 'name'],
        simplifyTolerance: false,
        label: {
          enable: true,
          color: '#000',
          field: 'name',
          size: 10,
          stroke: '#fff',
          strokeWidth: 2,
          textAllowOverlap: true,
          opacity: 1,
          textOffset: [0, 0],
          padding: [5, 5]
        },
        bubble: {
          enable: false,
          shape: 'circle',
          color: '#1AA9FF',
          size: 15,
          style: {
            opacity: 1,
            stroke: '#fff',
            strokeWidth: 1
          }
        },
        fill: {
          scale: null,
          color: '#ddd',
          style: {
            opacity: 1.0
          },
          activeColor: false
        },
        autoFit: true,
        showBorder: true,
        strokeOpacity: 1,
        stroke: '#bdbdbd',
        strokeVisible: true,
        strokeWidth: 0.6,
        cityStroke: '#636363',
        cityStrokeWidth: 0.6,
        countyStrokeWidth: 0.6,
        provinceStrokeWidth: 0.6,
        provinceStroke: '#f0f0f0',
        provinceStrokeVisible: true,
        countyStroke: '#525252',
        coastlineStroke: '#4190da',
        coastlineWidth: 0.6,
        nationalStroke: '#c994c7',
        nationalWidth: 0.5,
        chinaNationalStroke: 'gray',
        chinaNationalWidth: 1,
        popup: {
          enable: true,
          openTriggerEvent: 'mousemove',
          closeTriggerEvent: 'mouseout',
          option: {},
          Html: function Html(properties) {
            return "".concat(properties.name);
          }
        }
      };
    }
  }, {
    key: "addFillLayer",
    value: function addFillLayer(fillCountry) {
      var _this5 = this,
          _this$options$bubble2;

      // 添加省份填充
      var _this$options2 = this.options,
          popup = _this$options2.popup,
          _this$options2$data = _this$options2.data,
          data = _this$options2$data === void 0 ? [] : _this$options2$data,
          fill = _this$options2.fill,
          autoFit = _this$options2.autoFit,
          joinBy = _this$options2.joinBy,
          visible = _this$options2.visible,
          enablePropagation = _this$options2.enablePropagation,
          zIndex = _this$options2.zIndex;
      this.fillData = fillCountry;
      var fillLayer = new _l.PolygonLayer({
        autoFit: autoFit,
        visible: visible,
        enablePropagation: enablePropagation,
        zIndex: zIndex
      }).source(fillCountry, {
        transforms: data.length === 0 ? [] : [{
          type: 'join',
          sourceField: joinBy[1],
          targetField: joinBy[0],
          data: data
        }]
      });
      this.setLayerAttribute(fillLayer, 'color', fill.color);
      this.setLayerAttribute(fillLayer, 'filter', fill.filter);

      if (fill.scale && (0, _isObject.default)(fill.color)) {
        var _fill$color;

        fillLayer.scale('color', {
          type: fill.scale,
          //@ts-ignore
          field: fill === null || fill === void 0 ? void 0 : (_fill$color = fill.color) === null || _fill$color === void 0 ? void 0 : _fill$color.field
        });
      }

      fillLayer.shape('fill').style(fill.style);

      if (fill.activeColor) {
        fillLayer.active({
          color: fill.activeColor
        });
      }

      this.fillLayer = fillLayer;
      this.layers.push(fillLayer);
      this.scene.addLayer(fillLayer);

      if (this.options.onClick) {
        this.fillLayer.on('click', function (e) {
          _this5.options && _this5.options.onClick && _this5.options.onClick(e, _this5.layerType);
        });
      }

      if (this.options.bubble && ((_this$options$bubble2 = this.options.bubble) === null || _this$options$bubble2 === void 0 ? void 0 : _this$options$bubble2.enable) !== false) {
        var labeldata = fillCountry.features.map(function (feature) {
          return _objectSpread(_objectSpread({}, feature.properties), {}, {
            center: [feature.properties.x, feature.properties.y]
          });
        });
        this.addBubbleLayer(labeldata);
      }

      this.addPopup(); // 默认添加Popup 事件在
    }
  }, {
    key: "updateLayerAttribute",
    value: function updateLayerAttribute() {
      var layerName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'fill';
      var type = arguments.length > 1 ? arguments[1] : undefined;
      var attr = arguments.length > 2 ? arguments[2] : undefined;
      var layer = this.getLayer(layerName);
      this.setLayerAttribute(layer, type, attr);
    }
  }, {
    key: "enablePopup",
    value: function enablePopup() {
      this.setOption({
        popup: _objectSpread(_objectSpread({}, this.options.popup), {}, {
          enable: true
        })
      });
    }
  }, {
    key: "disablePopup",
    value: function disablePopup() {
      this.setOption({
        popup: _objectSpread(_objectSpread({}, this.options.popup), {}, {
          enable: false
        })
      });
    }
  }, {
    key: "addFillLine",
    value: function addFillLine(provinceLine) {
      var _this$options3 = this.options,
          stroke = _this$options3.stroke,
          strokeWidth = _this$options3.strokeWidth,
          zIndex = _this$options3.zIndex,
          visible = _this$options3.visible,
          strokeOpacity = _this$options3.strokeOpacity;
      var layer2 = new _l.LineLayer({
        zIndex: zIndex + 0.1,
        visible: visible
      }).source(provinceLine).color(stroke).size(strokeWidth).style({
        opacity: strokeOpacity
      });
      this.scene.addLayer(layer2);
      this.layers.push(layer2);
      this.lineLayer = layer2;
    }
  }, {
    key: "addLabelLayer",
    value: function addLabelLayer(labelData) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'json';
      var labelLayer = this.addLabel(labelData, type);
      this.scene.addLayer(labelLayer);
      this.layers.push(labelLayer);
      this.labelLayer = labelLayer;
    }
  }, {
    key: "addBubbleLayer",
    value: function addBubbleLayer(labelData) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'json';
      var _this$options4 = this.options,
          bubble = _this$options4.bubble,
          zIndex = _this$options4.zIndex,
          _this$options4$data = _this$options4.data,
          data = _this$options4$data === void 0 ? [] : _this$options4$data,
          joinBy = _this$options4.joinBy,
          visible = _this$options4.visible;
      var bubbleLayer = new _l.PointLayer({
        zIndex: zIndex + 0.3,
        visible: visible
      }).source(labelData, {
        parser: {
          type: type,
          coordinates: 'center'
        },
        transforms: data.length === 0 ? [] : [{
          type: 'join',
          sourceField: joinBy[1],
          targetField: joinBy[0],
          data: data
        }]
      });
      this.setLayerAttribute(bubbleLayer, 'color', bubble.color);
      this.setLayerAttribute(bubbleLayer, 'size', bubble.size);
      this.setLayerAttribute(bubbleLayer, 'shape', bubble.shape);
      this.setLayerAttribute(bubbleLayer, 'filter', bubble.filter);

      if (bubble.scale) {
        bubbleLayer.scale(bubble.scale.field, {
          type: bubble.scale.type
        });
      }

      bubbleLayer.style(bubble.style);
      this.scene.addLayer(bubbleLayer);
      this.layers.push(bubbleLayer);
      this.bubbleLayer = bubbleLayer;
      return bubbleLayer;
    }
  }, {
    key: "addLabel",
    value: function addLabel(labelData) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'json';
      var _this$options5 = this.options,
          label = _this$options5.label,
          zIndex = _this$options5.zIndex,
          visible = _this$options5.visible;
      var labelLayer = new _l.PointLayer({
        zIndex: zIndex + 5,
        visible: visible
      }).source(labelData, {
        parser: {
          type: type,
          coordinates: 'center'
        }
      }).shape(label.field, 'text').style(label);
      this.setLayerAttribute(labelLayer, 'color', label.color);
      this.setLayerAttribute(labelLayer, 'size', label.size);
      this.setLayerAttribute(labelLayer, 'filter', label.filter);
      return labelLayer;
    }
  }, {
    key: "addPopup",
    value: function addPopup() {
      var _this6 = this;

      var popup = this.options.popup;
      var popupLayer;

      if (popup.triggerLayer) {
        popupLayer = popup.triggerLayer === 'bubble' ? this.bubbleLayer : this.fillLayer;
      } else {
        popupLayer = this.options.bubble.enable ? this.bubbleLayer : this.fillLayer;
      }

      popupLayer.on(popup.openTriggerEvent, function (e) {
        // 增加关闭 popup
        if (!popup.enable) {
          return;
        }

        var html = popup.Html ? popup.Html(e.feature.properties ? e.feature.properties : e.feature) : '';
        _this6.popup = new _l.Popup(_objectSpread({
          closeButton: false
        }, popup.option)).setLnglat(e.lngLat).setHTML(html);

        _this6.scene.addPopup(_this6.popup);
      });
      popupLayer.on(popup.closeTriggerEvent, function (e) {
        if (_this6.popup) {
          _this6.popup.remove();
        }
      });
    }
  }, {
    key: "setLayerAttribute",
    value: function setLayerAttribute(layer, type, attr) {
      if (!attr) {
        return;
      }

      if ((0, _isObject.default)(attr)) {
        // @ts-ignore
        layer[type](attr.field, attr.values);
      } else {
        // @ts-ignore
        layer[type](attr);
      }
    }
  }]);

  return BaseLayer;
}(_eventemitter.EventEmitter);

exports.default = BaseLayer;
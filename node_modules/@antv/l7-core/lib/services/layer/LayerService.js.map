{"version":3,"sources":["../../../src/services/layer/LayerService.ts"],"names":["LayerService","TYPES","IRendererService","IMapService","IGlobalConfigService","Clock","layer","sceneInited","init","layers","push","updateLayerRenderList","mask","forEach","inited","layerList","id","find","name","refresh","layerIndex","indexOf","splice","renderLayers","parentLayer","layerChildren","destroy","flag","enableRender","alreadyInRendering","clear","hooks","beforeRenderData","call","beforeRender","masks","length","renderService","stencil","depth","framebuffer","map","m","render","afterRender","getLayerConfig","enableMultiPassRenderer","renderMultiPass","filter","isVisible","sort","pre","next","zIndex","animateInstanceCount","clock","start","runRender","stopRender","stop","extensionObject","OES_texture_float","shaderPicking","color","mapService","bgColor","layerRenderID","$window","requestAnimationFrame","bind","cancelAnimationFrame"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;IAOqBA,Y,WADpB,4B,UAuBE,uBAAOC,aAAMC,gBAAb,C,UAGA,uBAAOD,aAAME,WAAb,C,UAGA,uBAAOF,aAAMG,oBAAb,C;;;yDA1B8B,CAAC,C;iDACjB,IAAIC,cAAJ,E;8DAEsB,K;kDAEV,E;qDAEG,E;;uDAIC,K;gEAEQ,C;yDAGN,I;wDAED,I;;;;;;;;WAWhC,aAAWC,KAAX,EAA0B;AACxB,UAAI,KAAKC,WAAT,EAAsB;AACpBD,QAAAA,KAAK,CAACE,IAAN;AACD;;AAED,WAAKC,MAAL,CAAYC,IAAZ,CAAiBJ,KAAjB;AACA,WAAKK,qBAAL;AACD;;;WAED,iBAAeC,IAAf,EAA6B;AAC3B,UAAI,KAAKL,WAAT,EAAsB;AACpBK,QAAAA,IAAI,CAACJ,IAAL;AACD;AACF;;;WAED,sBAAoB;AAClB,WAAKD,WAAL,GAAmB,IAAnB;AACA,WAAKE,MAAL,CAAYI,OAAZ,CAAoB,UAACP,KAAD,EAAW;AAC7B,YAAI,CAACA,KAAK,CAACQ,MAAX,EAAmB;AACjBR,UAAAA,KAAK,CAACE,IAAN;AACD;AACF,OAJD;AAKA,WAAKG,qBAAL;AACD;;;WAED,0BAAwB;AACtB,aAAO,KAAKJ,WAAZ;AACD;;;WAED,yBAAiC;AAC/B,aAAO,KAAKQ,SAAZ;AACD;;;WAED,qBAA6B;AAC3B,aAAO,KAAKN,MAAZ;AACD;;;WAED,kBAAgBO,EAAhB,EAAgD;AAC9C,aAAO,KAAKP,MAAL,CAAYQ,IAAZ,CAAiB,UAACX,KAAD;AAAA,eAAWA,KAAK,CAACU,EAAN,KAAaA,EAAxB;AAAA,OAAjB,CAAP;AACD;;;WAED,wBAAsBE,IAAtB,EAAwD;AACtD,aAAO,KAAKT,MAAL,CAAYQ,IAAZ,CAAiB,UAACX,KAAD;AAAA,eAAWA,KAAK,CAACY,IAAN,KAAeA,IAA1B;AAAA,OAAjB,CAAP;AACD;;;WAED,qBAAmBZ,KAAnB,EAAkD;AAAA,UAAhBa,OAAgB,uEAAN,IAAM;AAChD,UAAMC,UAAU,GAAG,KAAKX,MAAL,CAAYY,OAAZ,CAAoBf,KAApB,CAAnB;;AACA,UAAIc,UAAU,GAAG,CAAC,CAAlB,EAAqB;AACnB,aAAKX,MAAL,CAAYa,MAAZ,CAAmBF,UAAnB,EAA+B,CAA/B;AACD;;AACD,UAAID,OAAJ,EAAa;AACX,aAAKR,qBAAL;AACA,aAAKY,YAAL;AACD;AACF;;;WAED,gBAAcjB,KAAd,EAA6BkB,WAA7B,EAAyD;AAEvD,UAAIA,WAAJ,EAAiB;AACf,YAAMJ,UAAU,GAAGI,WAAW,CAACC,aAAZ,CAA0BJ,OAA1B,CAAkCf,KAAlC,CAAnB;;AACA,YAAIc,UAAU,GAAG,CAAC,CAAlB,EAAqB;AACnBI,UAAAA,WAAW,CAACC,aAAZ,CAA0BH,MAA1B,CAAiCF,UAAjC,EAA6C,CAA7C;AACD;AACF,OALD,MAKO;AACL,YAAMA,WAAU,GAAG,KAAKX,MAAL,CAAYY,OAAZ,CAAoBf,KAApB,CAAnB;;AACA,YAAIc,WAAU,GAAG,CAAC,CAAlB,EAAqB;AACnB,eAAKX,MAAL,CAAYa,MAAZ,CAAmBF,WAAnB,EAA+B,CAA/B;AACD;AACF;;AACD,WAAKT,qBAAL;AACAL,MAAAA,KAAK,CAACoB,OAAN;AACA,WAAKH,YAAL;AACD;;;WAED,2BAAyB;AACvB,WAAKG,OAAL;AACD;;;WAED,yBAAuBC,IAAvB,EAAsC;AACpC,WAAKC,YAAL,GAAoBD,IAApB;AACD;;;;oFAED;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACM,KAAKE,kBAAL,IAA2B,CAAC,KAAKD,YADvC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIE,qBAAKC,kBAAL,GAA0B,IAA1B;AACA,qBAAKC,KAAL;AALF,uDAOsB,KAAKf,SAP3B;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOaT,gBAAAA,KAPb;AAQIA,gBAAAA,KAAK,CAACyB,KAAN,CAAYC,gBAAZ,CAA6BC,IAA7B;AACA3B,gBAAAA,KAAK,CAACyB,KAAN,CAAYG,YAAZ,CAAyBD,IAAzB;;AAEA,oBAAI3B,KAAK,CAAC6B,KAAN,CAAYC,MAAZ,GAAqB,CAAzB,EAA4B;AAE1B,uBAAKC,aAAL,CAAmBP,KAAnB,CAAyB;AACvBQ,oBAAAA,OAAO,EAAE,CADc;AAEvBC,oBAAAA,KAAK,EAAE,CAFgB;AAGvBC,oBAAAA,WAAW,EAAE;AAHU,mBAAzB;AAKAlC,kBAAAA,KAAK,CAAC6B,KAAN,CAAYM,GAAZ,CAAgB,UAACC,CAAD,EAAe;AAC7BA,oBAAAA,CAAC,CAACX,KAAF,CAAQC,gBAAR,CAAyBC,IAAzB;AACAS,oBAAAA,CAAC,CAACX,KAAF,CAAQG,YAAR,CAAqBD,IAArB;AACAS,oBAAAA,CAAC,CAACC,MAAF;AACAD,oBAAAA,CAAC,CAACX,KAAF,CAAQa,WAAR,CAAoBX,IAApB;AACD,mBALD;AAMD;;AAxBL,qBA0BQ3B,KAAK,CAACuC,cAAN,GAAuBC,uBA1B/B;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA4BYxC,KAAK,CAACyC,eAAN,EA5BZ;;AAAA;AAAA;AAAA;;AAAA;AA8BMzC,gBAAAA,KAAK,CAACqC,MAAN;;AA9BN;AAgCIrC,gBAAAA,KAAK,CAACyB,KAAN,CAAYa,WAAZ,CAAwBX,IAAxB;;AAhCJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAyCE,qBAAKJ,kBAAL,GAA0B,KAA1B;;AAzCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WA4CA,iCAA+B;AAAA;;AAE7B,WAAKd,SAAL,GAAiB,EAAjB;AACA,WAAKN,MAAL,CACGuC,MADH,CACU,UAAC1C,KAAD;AAAA,eAAWA,KAAK,CAACQ,MAAjB;AAAA,OADV,EAEGkC,MAFH,CAEU,UAAC1C,KAAD;AAAA,eAAWA,KAAK,CAAC2C,SAAN,EAAX;AAAA,OAFV,EAGGC,IAHH,CAGQ,UAACC,GAAD,EAAcC,IAAd,EAA+B;AAEnC,eAAOD,GAAG,CAACE,MAAJ,GAAaD,IAAI,CAACC,MAAzB;AACD,OANH,EAOGxC,OAPH,CAOW,UAACP,KAAD,EAAW;AAClB,QAAA,KAAI,CAACS,SAAL,CAAeL,IAAf,CAAoBJ,KAApB;AACD,OATH;AAUD;;;WAED,mBAAiB;AACf,WAAKG,MAAL,CAAYI,OAAZ,CAAoB,UAACP,KAAD,EAAW;AAC7BA,QAAAA,KAAK,CAACoB,OAAN;AACD,OAFD;AAGA,WAAKjB,MAAL,GAAc,EAAd;AACA,WAAKM,SAAL,GAAiB,EAAjB;AACA,WAAKQ,YAAL;AACD;;;WAED,wBAAsB;AACpB,UAAI,KAAK+B,oBAAL,OAAgC,CAApC,EAAuC;AACrC,aAAKC,KAAL,CAAWC,KAAX;AACA,aAAKC,SAAL;AACD;AACF;;;WAED,uBAAqB;AACnB,UAAI,EAAE,KAAKH,oBAAP,KAAgC,CAApC,EAAuC;AACrC,aAAKI,UAAL;AACA,aAAKH,KAAL,CAAWI,IAAX;AACD;AACF;;;WAED,8BAA4B;AAC1B,aAAO,KAAKtB,aAAL,CAAmBuB,eAAnB,CAAmCC,iBAA1C;AACD;;;WAGD,4BAA0B;AACxB,WAAKC,aAAL,GAAqB,IAArB;AACD;;;WAED,6BAA2B;AACzB,WAAKA,aAAL,GAAqB,KAArB;AACD;;;WAED,6BAA2B;AACzB,aAAO,KAAKA,aAAZ;AACD;;;WAED,iBAAe;AACb,UAAMC,KAAK,GAAG,sBAAQ,KAAKC,UAAL,CAAgBC,OAAxB,CAAd;AAMA,WAAK5B,aAAL,CAAmBP,KAAnB,CAAyB;AACvBiC,QAAAA,KAAK,EAALA,KADuB;AAEvBxB,QAAAA,KAAK,EAAE,CAFgB;AAGvBD,QAAAA,OAAO,EAAE,CAHc;AAIvBE,QAAAA,WAAW,EAAE;AAJU,OAAzB;AAMD;;;WAED,qBAAoB;AAClB,WAAKjB,YAAL;AACA,WAAK2C,aAAL,GAAqBC,iBAAQC,qBAAR,CACnB,KAAKX,SAAL,CAAeY,IAAf,CAAoB,IAApB,CADmB,CAArB;AAGD;;;WAED,sBAAqB;AACnBF,uBAAQG,oBAAR,CAA6B,KAAKJ,aAAlC;AACD","sourcesContent":["import { $window, rgb2arr } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { ILayer } from '../..';\nimport { TYPES } from '../../types';\nimport Clock from '../../utils/clock';\nimport { IGlobalConfigService } from '../config/IConfigService';\nimport { IMapService } from '../map/IMapService';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { ILayerModel, ILayerService } from './ILayerService';\n\n@injectable()\nexport default class LayerService implements ILayerService {\n  // pickedLayerId 参数用于指定当前存在被选中的 layer\n  public pickedLayerId: number = -1;\n  public clock = new Clock();\n\n  public alreadyInRendering: boolean = false;\n\n  private layers: ILayer[] = [];\n\n  private layerList: ILayer[] = [];\n\n  private layerRenderID: number;\n\n  private sceneInited: boolean = false;\n\n  private animateInstanceCount: number = 0;\n\n  // TODO: 是否开启 shader 中的颜色拾取计算\n  private shaderPicking: boolean = true;\n\n  private enableRender: boolean = true;\n\n  @inject(TYPES.IRendererService)\n  private readonly renderService: IRendererService;\n\n  @inject(TYPES.IMapService)\n  private readonly mapService: IMapService;\n\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  public add(layer: ILayer) {\n    if (this.sceneInited) {\n      layer.init();\n    }\n\n    this.layers.push(layer);\n    this.updateLayerRenderList();\n  }\n\n  public addMask(mask: ILayer) {\n    if (this.sceneInited) {\n      mask.init();\n    }\n  }\n\n  public initLayers() {\n    this.sceneInited = true;\n    this.layers.forEach((layer) => {\n      if (!layer.inited) {\n        layer.init();\n      }\n    });\n    this.updateLayerRenderList();\n  }\n\n  public getSceneInited() {\n    return this.sceneInited;\n  }\n\n  public getRenderList(): ILayer[] {\n    return this.layerList;\n  }\n\n  public getLayers(): ILayer[] {\n    return this.layers;\n  }\n\n  public getLayer(id: string): ILayer | undefined {\n    return this.layers.find((layer) => layer.id === id);\n  }\n\n  public getLayerByName(name: string): ILayer | undefined {\n    return this.layers.find((layer) => layer.name === name);\n  }\n\n  public cleanRemove(layer: ILayer, refresh = true) {\n    const layerIndex = this.layers.indexOf(layer);\n    if (layerIndex > -1) {\n      this.layers.splice(layerIndex, 1);\n    }\n    if (refresh) {\n      this.updateLayerRenderList();\n      this.renderLayers();\n    }\n  }\n\n  public remove(layer: ILayer, parentLayer?: ILayer): void {\n    // Tip: layer.layerChildren 当 layer 存在子图层的情况\n    if (parentLayer) {\n      const layerIndex = parentLayer.layerChildren.indexOf(layer);\n      if (layerIndex > -1) {\n        parentLayer.layerChildren.splice(layerIndex, 1);\n      }\n    } else {\n      const layerIndex = this.layers.indexOf(layer);\n      if (layerIndex > -1) {\n        this.layers.splice(layerIndex, 1);\n      }\n    }\n    this.updateLayerRenderList();\n    layer.destroy();\n    this.renderLayers();\n  }\n\n  public removeAllLayers() {\n    this.destroy();\n  }\n\n  public setEnableRender(flag: boolean) {\n    this.enableRender = flag;\n  }\n\n  public async renderLayers() {\n    if (this.alreadyInRendering || !this.enableRender) {\n      return;\n    }\n    this.alreadyInRendering = true;\n    this.clear();\n\n    for (const layer of this.layerList) {\n      layer.hooks.beforeRenderData.call();\n      layer.hooks.beforeRender.call();\n\n      if (layer.masks.length > 0) {\n        // 清除上一次的模版缓存\n        this.renderService.clear({\n          stencil: 0,\n          depth: 1,\n          framebuffer: null,\n        });\n        layer.masks.map((m: ILayer) => {\n          m.hooks.beforeRenderData.call();\n          m.hooks.beforeRender.call();\n          m.render();\n          m.hooks.afterRender.call();\n        });\n      }\n\n      if (layer.getLayerConfig().enableMultiPassRenderer) {\n        // multiPassRender 不是同步渲染完成的\n        await layer.renderMultiPass();\n      } else {\n        layer.render();\n      }\n      layer.hooks.afterRender.call();\n    }\n\n    // this.layerList.forEach((layer) => {\n    //   layer.hooks.beforeRenderData.call();\n    //   layer.hooks.beforeRender.call();\n    //   layer.render();\n    //   layer.hooks.afterRender.call();\n    // });\n    this.alreadyInRendering = false;\n  }\n\n  public updateLayerRenderList() {\n    // TODO: 每次更新都是从 layers 重新构建\n    this.layerList = [];\n    this.layers\n      .filter((layer) => layer.inited)\n      .filter((layer) => layer.isVisible())\n      .sort((pre: ILayer, next: ILayer) => {\n        // 根据 zIndex 对渲染顺序进行排序\n        return pre.zIndex - next.zIndex;\n      })\n      .forEach((layer) => {\n        this.layerList.push(layer);\n      });\n  }\n\n  public destroy() {\n    this.layers.forEach((layer) => {\n      layer.destroy();\n    });\n    this.layers = [];\n    this.layerList = [];\n    this.renderLayers();\n  }\n\n  public startAnimate() {\n    if (this.animateInstanceCount++ === 0) {\n      this.clock.start();\n      this.runRender();\n    }\n  }\n\n  public stopAnimate() {\n    if (--this.animateInstanceCount === 0) {\n      this.stopRender();\n      this.clock.stop();\n    }\n  }\n\n  public getOESTextureFloat() {\n    return this.renderService.extensionObject.OES_texture_float;\n  }\n\n  // 控制着色器颜色拾取计算\n  public enableShaderPick() {\n    this.shaderPicking = true;\n  }\n\n  public disableShaderPick() {\n    this.shaderPicking = false;\n  }\n\n  public getShaderPickStat() {\n    return this.shaderPicking;\n  }\n\n  public clear() {\n    const color = rgb2arr(this.mapService.bgColor) as [\n      number,\n      number,\n      number,\n      number,\n    ];\n    this.renderService.clear({\n      color,\n      depth: 1,\n      stencil: 0,\n      framebuffer: null,\n    });\n  }\n\n  private runRender() {\n    this.renderLayers();\n    this.layerRenderID = $window.requestAnimationFrame(\n      this.runRender.bind(this),\n    );\n  }\n\n  private stopRender() {\n    $window.cancelAnimationFrame(this.layerRenderID);\n  }\n}\n"],"file":"LayerService.js"}
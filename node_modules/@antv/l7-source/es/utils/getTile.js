import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { getImage, getTiffImage, getURLFromTemplate } from '@antv/l7-utils';
export var getTileBuffer = function () {
  var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, tileParams, tile, rasterParser) {
    var imgUrl;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            imgUrl = getURLFromTemplate(url, tileParams);
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              var xhr = getTiffImage({
                url: imgUrl
              }, function (err, img) {
                if (err) {
                  reject(err);
                } else if (img) {
                  resolve(img);
                }
              }, rasterParser);

              tile.xhrCancel = function () {
                return xhr.abort();
              };
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getTileBuffer(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();
export var getTileImage = function () {
  var _ref2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(url, tileParams, tile) {
    var imgUrl;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            imgUrl = getURLFromTemplate(url, tileParams);
            return _context2.abrupt("return", new Promise(function (resolve, reject) {
              var xhr = getImage({
                url: imgUrl
              }, function (err, img) {
                if (err) {
                  reject(err);
                } else if (img) {
                  resolve(img);
                }
              });

              tile.xhrCancel = function () {
                return xhr.abort();
              };
            }));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getTileImage(_x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();
export var defaultFormat = function defaultFormat() {
  return {
    rasterData: new Uint8Array([0]),
    width: 1,
    height: 1
  };
};
//# sourceMappingURL=getTile.js.map
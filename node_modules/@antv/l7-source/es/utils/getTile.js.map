{"version":3,"sources":["../../src/utils/getTile.ts"],"names":["getImage","getTiffImage","getURLFromTemplate","getTileBuffer","url","tileParams","tile","rasterParser","imgUrl","Promise","resolve","reject","xhr","err","img","xhrCancel","abort","getTileImage","defaultFormat","rasterData","Uint8Array","width","height"],"mappings":";;AAAA,SACEA,QADF,EAEEC,YAFF,EAGEC,kBAHF,QAMO,gBANP;AAgBA,OAAO,IAAMC,aAAa;AAAA,wDAAG,iBAC3BC,GAD2B,EAE3BC,UAF2B,EAG3BC,IAH2B,EAI3BC,YAJ2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAMrBC,YAAAA,MANqB,GAMZN,kBAAkB,CAACE,GAAD,EAAMC,UAAN,CANN;AAAA,6CAQpB,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAMC,GAAG,GAAGX,YAAY,CACtB;AAAEG,gBAAAA,GAAG,EAAEI;AAAP,eADsB,EAEtB,UAACK,GAAD,EAAMC,GAAN,EAAc;AACZ,oBAAID,GAAJ,EAAS;AACPF,kBAAAA,MAAM,CAACE,GAAD,CAAN;AACD,iBAFD,MAEO,IAAIC,GAAJ,EAAS;AACdJ,kBAAAA,OAAO,CAACI,GAAD,CAAP;AACD;AACF,eARqB,EAStBP,YATsB,CAAxB;;AAWAD,cAAAA,IAAI,CAACS,SAAL,GAAiB;AAAA,uBAAMH,GAAG,CAACI,KAAJ,EAAN;AAAA,eAAjB;AACD,aAbM,CARoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbb,aAAa;AAAA;AAAA;AAAA,GAAnB;AAwBP,OAAO,IAAMc,YAAY;AAAA,yDAAG,kBAC1Bb,GAD0B,EAE1BC,UAF0B,EAG1BC,IAH0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAKpBE,YAAAA,MALoB,GAKXN,kBAAkB,CAACE,GAAD,EAAMC,UAAN,CALP;AAAA,8CAOnB,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAMC,GAAG,GAAGZ,QAAQ,CAAC;AAAEI,gBAAAA,GAAG,EAAEI;AAAP,eAAD,EAAkB,UAACK,GAAD,EAAMC,GAAN,EAAc;AAClD,oBAAID,GAAJ,EAAS;AACPF,kBAAAA,MAAM,CAACE,GAAD,CAAN;AACD,iBAFD,MAEO,IAAIC,GAAJ,EAAS;AACdJ,kBAAAA,OAAO,CAACI,GAAD,CAAP;AACD;AACF,eANmB,CAApB;;AAOAR,cAAAA,IAAI,CAACS,SAAL,GAAiB;AAAA,uBAAMH,GAAG,CAACI,KAAJ,EAAN;AAAA,eAAjB;AACD,aATM,CAPmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZC,YAAY;AAAA;AAAA;AAAA,GAAlB;AAmBP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,SAAO;AACLC,IAAAA,UAAU,EAAE,IAAIC,UAAJ,CAAe,CAAC,CAAD,CAAf,CADP;AAELC,IAAAA,KAAK,EAAE,CAFF;AAGLC,IAAAA,MAAM,EAAE;AAHH,GAAP;AAKD,CANM","sourcesContent":["import {\n  getImage,\n  getTiffImage,\n  getURLFromTemplate,\n  Tile,\n  TileLoadParams,\n} from '@antv/l7-utils';\n\n/**\n * 用于获取 raster data 的瓦片，如 tiff、lerc、dem 等\n * @param url\n * @param tileParams\n * @param tile\n * @param rasterParser\n * @returns\n */\nexport const getTileBuffer = async (\n  url: string | string[],\n  tileParams: TileLoadParams,\n  tile: Tile,\n  rasterParser: any,\n): Promise<HTMLImageElement | ImageBitmap> => {\n  const imgUrl = getURLFromTemplate(url, tileParams);\n\n  return new Promise((resolve, reject) => {\n    const xhr = getTiffImage(\n      { url: imgUrl },\n      (err, img) => {\n        if (err) {\n          reject(err);\n        } else if (img) {\n          resolve(img);\n        }\n      },\n      rasterParser,\n    );\n    tile.xhrCancel = () => xhr.abort();\n  });\n};\n\nexport const getTileImage = async (\n  url: string | string[],\n  tileParams: TileLoadParams,\n  tile: Tile,\n): Promise<HTMLImageElement | ImageBitmap> => {\n  const imgUrl = getURLFromTemplate(url, tileParams);\n\n  return new Promise((resolve, reject) => {\n    const xhr = getImage({ url: imgUrl }, (err, img) => {\n      if (err) {\n        reject(err);\n      } else if (img) {\n        resolve(img);\n      }\n    });\n    tile.xhrCancel = () => xhr.abort();\n  });\n};\n\nexport const defaultFormat = () => {\n  return {\n    rasterData: new Uint8Array([0]),\n    width: 1,\n    height: 1,\n  };\n};\n"],"file":"getTile.js"}
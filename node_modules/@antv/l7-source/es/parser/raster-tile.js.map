{"version":3,"sources":["../../src/parser/raster-tile.ts"],"names":["RasterTileType","defaultFormat","getTileBuffer","getTileImage","DEFAULT_CONFIG","tileSize","minZoom","maxZoom","Infinity","zoomOffset","rasterTile","data","cfg","tileDataType","dataType","IMAGE","getTileData","tileParams","tile","format","tilesetOptions","dataArray","isTile"],"mappings":";;;;;;AACA,SAGEA,cAHF,QAIO,cAJP;AAKA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,YAAvC,QAA2D,kBAA3D;AAEA,IAAMC,cAA8C,GAAG;AACrDC,EAAAA,QAAQ,EAAE,GAD2C;AAErDC,EAAAA,OAAO,EAAE,CAF4C;AAGrDC,EAAAA,OAAO,EAAEC,QAH4C;AAIrDC,EAAAA,UAAU,EAAE;AAJyC,CAAvD;AAOA,eAAe,SAASC,UAAT,CACbC,IADa,EAEbC,GAFa,EAGA;AACb,MAAMC,YAA4B,GAAG,CAAAD,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEE,QAAL,KAAiBd,cAAc,CAACe,KAArE;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,UAAD,EAA6BC,IAA7B,EAA4C;AAC9D,QAAIL,YAAY,KAAKb,cAAc,CAACe,KAApC,EAA2C;AACzC,aAAOZ,YAAY,CAACQ,IAAD,EAAOM,UAAP,EAAmBC,IAAnB,CAAnB;AACD,KAFD,MAEO;AACL,aAAOhB,aAAa,CAClBS,IADkB,EAElBM,UAFkB,EAGlBC,IAHkB,EAIlB,CAAAN,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEO,MAAL,KAAelB,aAJG,CAApB;AAMD;AACF,GAXD;;AAaA,MAAMmB,cAAc,iDAAQhB,cAAR,GAA2BQ,GAA3B;AAAgCI,IAAAA,WAAW,EAAXA;AAAhC,IAApB;;AAEA,SAAO;AACLL,IAAAA,IAAI,EAAJA,IADK;AAELU,IAAAA,SAAS,EAAE,EAFN;AAGLD,IAAAA,cAAc,EAAdA,cAHK;AAILE,IAAAA,MAAM,EAAE;AAJH,GAAP;AAMD","sourcesContent":["import { Tile, TileLoadParams, TilesetManagerOptions } from '@antv/l7-utils';\nimport {\n  IParserData,\n  IRasterTileParserCFG,\n  RasterTileType,\n} from '../interface';\nimport { defaultFormat, getTileBuffer, getTileImage } from '../utils/getTile';\n\nconst DEFAULT_CONFIG: Partial<TilesetManagerOptions> = {\n  tileSize: 256,\n  minZoom: 0,\n  maxZoom: Infinity,\n  zoomOffset: 0,\n};\n\nexport default function rasterTile(\n  data: string | string[],\n  cfg?: IRasterTileParserCFG,\n): IParserData {\n  const tileDataType: RasterTileType = cfg?.dataType || RasterTileType.IMAGE;\n  const getTileData = (tileParams: TileLoadParams, tile: Tile) => {\n    if (tileDataType === RasterTileType.IMAGE) {\n      return getTileImage(data, tileParams, tile);\n    } else {\n      return getTileBuffer(\n        data,\n        tileParams,\n        tile,\n        cfg?.format || defaultFormat,\n      );\n    }\n  };\n\n  const tilesetOptions = { ...DEFAULT_CONFIG, ...cfg, getTileData };\n\n  return {\n    data,\n    dataArray: [],\n    tilesetOptions,\n    isTile: true,\n  };\n}\n"],"file":"raster-tile.js"}
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import rewind from '@mapbox/geojson-rewind';
import { getCoords } from '@turf/invariant';
import * as turfMeta from '@turf/meta';

function djb2hash(field) {
  var str = field.toString();
  var hash = 5381;
  var i = str.length;

  while (i) {
    hash = hash * 33 ^ str.charCodeAt(--i);
  }

  return hash >>> 0;
}

function getFeatureID(feature, key) {
  if (key === undefined) {
    return null;
  }

  if (key === 'id' && feature.id) {
    return feature.id;
  }

  if (feature[key]) {
    return feature[key];
  }

  if (feature.properties && feature.properties[key]) {
    return djb2hash(feature.properties[key] + '') % 1000019;
  }

  return null;
}

export default function geoJSON(data, cfg) {
  var resultData = [];
  var featureKeys = {};

  if (!data.features) {
    data.features = [];
    return {
      dataArray: []
    };
  }

  data.features = data.features.filter(function (item) {
    var geometry = item.geometry;
    return item != null && geometry && geometry.type && geometry.coordinates && geometry.coordinates.length > 0;
  });
  rewind(data, true);

  if (data.features.length === 0) {
    return {
      dataArray: [],
      featureKeys: featureKeys
    };
  }

  turfMeta.flattenEach(data, function (currentFeature, featureIndex) {
    var featureId = getFeatureID(currentFeature, cfg === null || cfg === void 0 ? void 0 : cfg.featureId);

    if (featureId === null) {
      featureId = featureIndex;
    }

    var sortedID = featureId;
    var coord = getCoords(currentFeature);

    var dataItem = _objectSpread(_objectSpread({}, currentFeature.properties), {}, {
      coordinates: coord,
      _id: sortedID
    });

    resultData.push(dataItem);
  });
  return {
    dataArray: resultData,
    featureKeys: featureKeys
  };
}
//# sourceMappingURL=geojson.js.map
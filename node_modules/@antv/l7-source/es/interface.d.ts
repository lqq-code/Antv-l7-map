export declare type DataType = string | object[] | object;
export interface IDictionary<TValue> {
    [key: string]: TValue;
}
export interface IFeatureKey {
    [key: string]: {
        index: number;
        idField: any;
    };
}
export interface IParseDataItem {
    coordinates: any[];
    _id: number;
    [key: string]: any;
}
export interface IParserData {
    [key: string]: any;
    dataArray: IParseDataItem[];
    featureKeys?: IFeatureKey;
}
export declare enum RasterTileType {
    IMAGE = "image",
    ARRAYBUFFER = "arraybuffer"
}
export interface IRasterTileParserCFG {
    tileSize?: number;
    minZoom?: number;
    maxZoom?: number;
    zoomOffset?: number;
    extent?: [number, number, number, number];
    updateStrategy?: 'overlap' | 'replace';
    featureId?: string;
    sourceLayer?: string;
    coord?: string;
    dataType?: RasterTileType;
    format?: any;
}
export interface IJsonItem {
    [key: string]: any;
}
export declare type IJsonData = IJsonItem[];

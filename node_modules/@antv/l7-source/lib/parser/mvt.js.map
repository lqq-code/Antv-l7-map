{"version":3,"sources":["../../src/parser/mvt.ts"],"names":["DEFAULT_CONFIG","tileSize","minZoom","maxZoom","Infinity","zoomOffset","TILE_SIZE","osmTileXY2LonLat","x","y","zoom","lon","Math","pow","n","PI","lat","atan","exp","signedArea","ring","sum","i","len","length","j","p1","p2","classifyRings","rings","polygons","polygon","ccw","area","undefined","push","VectorTileFeatureTypes","GetGeoJSON","z","vectorTileFeature","extent","coords","loadGeometry","currenType","type","currentProperties","properties","currentId","id","size","project","line","index","point","points","result","geometry","coordinates","tileOrigin","coord","getVectorTile","url","tileParams","tile","tileUrl","Promise","resolve","xhr","err","data","layers","vectorTile","VectorTile","Protobuf","Object","keys","sourceLayer","features","vectorTileLayer","feature","toGeoJSON","l7TileOrigin","l7TileCoord","xhrCancel","abort","mapboxVectorTile","cfg","getTileData","tilesetOptions","dataArray","isTile"],"mappings":"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","sourcesContent":["import {\n  getArrayBuffer,\n  getURLFromTemplate,\n  Tile,\n  TileLoadParams,\n  TilesetManagerOptions,\n} from '@antv/l7-utils';\nimport {\n  VectorTile,\n  VectorTileFeature,\n  VectorTileLayer,\n} from '@mapbox/vector-tile';\nimport { Feature } from 'geojson';\nimport Protobuf from 'pbf';\nimport { IParserData, IRasterTileParserCFG } from '../interface';\n\nconst DEFAULT_CONFIG: Partial<TilesetManagerOptions> = {\n  tileSize: 256,\n  minZoom: 0,\n  maxZoom: Infinity,\n  zoomOffset: 0,\n};\n\nconst TILE_SIZE = 512;\n\nexport function osmTileXY2LonLat(x: number, y: number, zoom: number) {\n  const lon = (x / Math.pow(2, zoom)) * 360 - 180;\n  const n = Math.PI - (2 * Math.PI * y) / Math.pow(2, zoom);\n  const lat = (180 / Math.PI) * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n  return [lon, lat];\n}\n\nfunction signedArea(ring: any[]) {\n  let sum = 0;\n  for (let i = 0, len = ring.length, j = len - 1, p1, p2; i < len; j = i++) {\n    p1 = ring[i];\n    p2 = ring[j];\n    sum += (p2.x - p1.x) * (p1.y + p2.y);\n  }\n  return sum;\n}\n\nfunction classifyRings(rings: any[]) {\n  const len = rings.length;\n\n  if (len <= 1) {\n    return [rings];\n  }\n\n  const polygons: any = [];\n  let polygon: any;\n  let ccw;\n\n  for (let i = 0; i < len; i++) {\n    const area = signedArea(rings[i]);\n    if (area === 0) {\n      continue;\n    }\n\n    if (ccw === undefined) {\n      ccw = area < 0;\n    }\n\n    if (ccw === area < 0) {\n      if (polygon) {\n        polygons.push(polygon);\n      }\n      polygon = [rings[i]];\n    } else {\n      polygon.push(rings[i]);\n    }\n  }\n  if (polygon) {\n    polygons.push(polygon);\n  }\n\n  return polygons;\n}\n\nconst VectorTileFeatureTypes = ['Unknown', 'Point', 'LineString', 'Polygon'];\nfunction GetGeoJSON(z: number, vectorTileFeature: VectorTileFeature) {\n  const extent = vectorTileFeature.extent;\n  let coords = vectorTileFeature.loadGeometry() as any;\n  const currenType = vectorTileFeature.type;\n  const currentProperties = vectorTileFeature.properties;\n  const currentId = vectorTileFeature.id;\n\n  const size = extent * Math.pow(2, z);\n\n  let type = VectorTileFeatureTypes[currenType];\n  let i;\n  let j;\n\n  function project(line: any[]) {\n    for (let index = 0; index < line.length; index++) {\n      const point = line[index];\n      line[index] = [\n        (point.x / size) * TILE_SIZE,\n        (point.y / size) * TILE_SIZE,\n      ];\n    }\n  }\n\n  switch (currenType) {\n    case 1:\n      const points = [];\n      for (i = 0; i < coords.length; i++) {\n        points[i] = coords[i][0];\n      }\n      coords = points;\n      project(coords);\n      break;\n\n    case 2:\n      for (i = 0; i < coords.length; i++) {\n        project(coords[i]);\n      }\n      break;\n\n    case 3:\n      coords = classifyRings(coords);\n      for (i = 0; i < coords.length; i++) {\n        for (j = 0; j < coords[i].length; j++) {\n          project(coords[i][j]);\n        }\n      }\n      break;\n  }\n\n  if (coords.length === 1) {\n    coords = coords[0];\n  } else {\n    type = 'Multi' + type;\n  }\n\n  const result = {\n    type: 'Feature',\n    geometry: {\n      type,\n      coordinates: coords,\n    },\n    properties: currentProperties,\n    id: currentId,\n    tileOrigin: [0, 0],\n    coord: '',\n  };\n\n  return result;\n}\n\nexport type MapboxVectorTile = {\n  layers: { [_: string]: VectorTileLayer & { features: Feature[] } };\n};\n\nconst getVectorTile = async (\n  url: string | string[],\n  tileParams: TileLoadParams,\n  tile: Tile,\n  coord: string,\n): Promise<MapboxVectorTile> => {\n  const tileUrl = getURLFromTemplate(url, tileParams);\n\n  return new Promise((resolve) => {\n    const xhr = getArrayBuffer({ url: tileUrl }, (err, data) => {\n      if (err || !data) {\n        // reject(err);\n        resolve({ layers: {} });\n      } else {\n        const vectorTile = new VectorTile(\n          new Protobuf(data),\n        ) as MapboxVectorTile;\n        // check tile source layer\n        // console.log(vectorTile)\n\n        const tileOrigin = osmTileXY2LonLat(\n          tileParams.x,\n          tileParams.y,\n          tileParams.z,\n        );\n        const zoom = tileParams.z;\n\n        for (const sourceLayer of Object.keys(vectorTile.layers)) {\n          const features = [];\n          const vectorTileLayer = vectorTile.layers[sourceLayer];\n          for (let i = 0; i < vectorTile.layers[sourceLayer].length; i++) {\n            const vectorTileFeature = vectorTile.layers[sourceLayer].feature(i);\n            let feature;\n            if (coord === 'lnglat') {\n              feature = vectorTileFeature.toGeoJSON(\n                tileParams.x,\n                tileParams.y,\n                tileParams.z,\n              );\n            } else {\n              feature = GetGeoJSON(zoom, vectorTileFeature);\n              // @ts-ignore\n              vectorTileLayer.l7TileOrigin = tileOrigin;\n              // @ts-ignore\n              vectorTileLayer.l7TileCoord = coord;\n            }\n\n            features.push(feature);\n          }\n          // @ts-ignore\n          vectorTileLayer.features = features;\n        }\n\n        resolve(vectorTile);\n      }\n    });\n    tile.xhrCancel = () => xhr.abort();\n  });\n};\n\nexport default function mapboxVectorTile(\n  data: string | string[],\n  cfg?: IRasterTileParserCFG,\n): IParserData {\n  const coord = cfg?.coord || 'lnglat'; // lnglat - offset\n  const getTileData = (tileParams: TileLoadParams, tile: Tile) =>\n    getVectorTile(data, tileParams, tile, coord);\n  const tilesetOptions = {\n    ...DEFAULT_CONFIG,\n    ...cfg,\n    getTileData,\n  };\n\n  return {\n    data,\n    dataArray: [],\n    tilesetOptions,\n    isTile: true,\n  };\n}\n"],"file":"mvt.js"}
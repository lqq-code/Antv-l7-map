"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTileImage = exports.getTileBuffer = exports.defaultFormat = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _l7Utils = require("@antv/l7-utils");

var getTileBuffer = function () {
  var _ref = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(url, tileParams, tile, rasterParser) {
    var imgUrl;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            imgUrl = (0, _l7Utils.getURLFromTemplate)(url, tileParams);
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              var xhr = (0, _l7Utils.getTiffImage)({
                url: imgUrl
              }, function (err, img) {
                if (err) {
                  reject(err);
                } else if (img) {
                  resolve(img);
                }
              }, rasterParser);

              tile.xhrCancel = function () {
                return xhr.abort();
              };
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getTileBuffer(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

exports.getTileBuffer = getTileBuffer;

var getTileImage = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(url, tileParams, tile) {
    var imgUrl;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            imgUrl = (0, _l7Utils.getURLFromTemplate)(url, tileParams);
            return _context2.abrupt("return", new Promise(function (resolve, reject) {
              var xhr = (0, _l7Utils.getImage)({
                url: imgUrl
              }, function (err, img) {
                if (err) {
                  reject(err);
                } else if (img) {
                  resolve(img);
                }
              });

              tile.xhrCancel = function () {
                return xhr.abort();
              };
            }));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getTileImage(_x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();

exports.getTileImage = getTileImage;

var defaultFormat = function defaultFormat() {
  return {
    rasterData: new Uint8Array([0]),
    width: 1,
    height: 1
  };
};

exports.defaultFormat = defaultFormat;
//# sourceMappingURL=getTile.js.map